
ledMatrix1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000622  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b8  00800060  00000622  00000696  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000074e  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000f8  00000000  00000000  0000077e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000bba  00000000  00000000  00000876  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000377  00000000  00000000  00001430  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000005a6  00000000  00000000  000017a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000274  00000000  00000000  00001d50  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000402  00000000  00000000  00001fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000016d2  00000000  00000000  000023c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000b0  00000000  00000000  00003a98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e2       	ldi	r30, 0x22	; 34
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 31       	cpi	r26, 0x18	; 24
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 0f 03 	jmp	0x61e	; 0x61e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:

int main(void)
{
	U8 check= 0, i;
	
	IO_PinDir(C,0,OUTPUT);
  82:	41 e0       	ldi	r20, 0x01	; 1
  84:	60 e0       	ldi	r22, 0x00	; 0
  86:	83 e3       	ldi	r24, 0x33	; 51
  88:	0e 94 66 00 	call	0xcc	; 0xcc <IO_PinDir>
	
	
	while(1)
	{
		/* drawing A to Z */
		for(i= 'A'; i<= 'Z' ; i++)
  8c:	c1 e4       	ldi	r28, 0x41	; 65
  8e:	0d c0       	rjmp	.+26     	; 0xaa <main+0x28>
		{
			check= LMTRX5x7_DrawAlpha(i,500);
  90:	64 ef       	ldi	r22, 0xF4	; 244
  92:	71 e0       	ldi	r23, 0x01	; 1
  94:	8c 2f       	mov	r24, r28
  96:	0e 94 2f 01 	call	0x25e	; 0x25e <LMTRX5x7_DrawAlpha>
			IO_PinWrite(C,0,check);
  9a:	48 2f       	mov	r20, r24
  9c:	60 e0       	ldi	r22, 0x00	; 0
  9e:	83 e3       	ldi	r24, 0x33	; 51
  a0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <IO_PinWrite>
	
	
	while(1)
	{
		/* drawing A to Z */
		for(i= 'A'; i<= 'Z' ; i++)
  a4:	cf 5f       	subi	r28, 0xFF	; 255
  a6:	01 c0       	rjmp	.+2      	; 0xaa <main+0x28>
  a8:	c1 e4       	ldi	r28, 0x41	; 65
  aa:	cb 35       	cpi	r28, 0x5B	; 91
  ac:	88 f3       	brcs	.-30     	; 0x90 <main+0xe>
  ae:	c0 e3       	ldi	r28, 0x30	; 48
		}

		/* drawing 0 to 9 */
		for(i= '0'; i<= '9' ; i++)
		{
			check= LMTRX5x7_DrawDigit(i,500);
  b0:	64 ef       	ldi	r22, 0xF4	; 244
  b2:	71 e0       	ldi	r23, 0x01	; 1
  b4:	8c 2f       	mov	r24, r28
  b6:	0e 94 19 02 	call	0x432	; 0x432 <LMTRX5x7_DrawDigit>
			IO_PinWrite(C,0,check);
  ba:	48 2f       	mov	r20, r24
  bc:	60 e0       	ldi	r22, 0x00	; 0
  be:	83 e3       	ldi	r24, 0x33	; 51
  c0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <IO_PinWrite>
			check= LMTRX5x7_DrawAlpha(i,500);
			IO_PinWrite(C,0,check);
		}

		/* drawing 0 to 9 */
		for(i= '0'; i<= '9' ; i++)
  c4:	cf 5f       	subi	r28, 0xFF	; 255
  c6:	ca 33       	cpi	r28, 0x3A	; 58
  c8:	99 f7       	brne	.-26     	; 0xb0 <main+0x2e>
  ca:	ee cf       	rjmp	.-36     	; 0xa8 <main+0x26>

000000cc <IO_PinDir>:

/* FUNCTION(2) */
U8 IO_PinDir(U8 portBase, U8 pin, U8 dir)
{
	U8 checkPin= 0;
	if( checkPin= (TRUE_PORT(portBase) && TRUE_PIN(pin) && TRUE_DIR(dir)) )
  cc:	89 33       	cpi	r24, 0x39	; 57
  ce:	31 f0       	breq	.+12     	; 0xdc <IO_PinDir+0x10>
  d0:	86 33       	cpi	r24, 0x36	; 54
  d2:	21 f0       	breq	.+8      	; 0xdc <IO_PinDir+0x10>
  d4:	83 33       	cpi	r24, 0x33	; 51
  d6:	11 f0       	breq	.+4      	; 0xdc <IO_PinDir+0x10>
  d8:	80 33       	cpi	r24, 0x30	; 48
  da:	29 f5       	brne	.+74     	; 0x126 <IO_PinDir+0x5a>
  dc:	68 30       	cpi	r22, 0x08	; 8
  de:	28 f5       	brcc	.+74     	; 0x12a <IO_PinDir+0x5e>
  e0:	42 30       	cpi	r20, 0x02	; 2
  e2:	28 f1       	brcs	.+74     	; 0x12e <IO_PinDir+0x62>
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	08 95       	ret
	{
		if(dir == OUTPUT)
			SET_BIT(DDR(portBase),pin);
  e8:	e8 2f       	mov	r30, r24
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	21 81       	ldd	r18, Z+1	; 0x01
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	ac 01       	movw	r20, r24
  f4:	02 c0       	rjmp	.+4      	; 0xfa <IO_PinDir+0x2e>
  f6:	44 0f       	add	r20, r20
  f8:	55 1f       	adc	r21, r21
  fa:	6a 95       	dec	r22
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <IO_PinDir+0x2a>
  fe:	ba 01       	movw	r22, r20
 100:	62 2b       	or	r22, r18
 102:	61 83       	std	Z+1, r22	; 0x01
 104:	08 95       	ret
		else
			CLR_BIT(DDR(portBase),pin);
 106:	e8 2f       	mov	r30, r24
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	21 81       	ldd	r18, Z+1	; 0x01
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	ac 01       	movw	r20, r24
 112:	02 c0       	rjmp	.+4      	; 0x118 <IO_PinDir+0x4c>
 114:	44 0f       	add	r20, r20
 116:	55 1f       	adc	r21, r21
 118:	6a 95       	dec	r22
 11a:	e2 f7       	brpl	.-8      	; 0x114 <IO_PinDir+0x48>
 11c:	ba 01       	movw	r22, r20
 11e:	60 95       	com	r22
 120:	62 23       	and	r22, r18
 122:	61 83       	std	Z+1, r22	; 0x01
 124:	08 95       	ret

/* FUNCTION(2) */
U8 IO_PinDir(U8 portBase, U8 pin, U8 dir)
{
	U8 checkPin= 0;
	if( checkPin= (TRUE_PORT(portBase) && TRUE_PIN(pin) && TRUE_DIR(dir)) )
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	08 95       	ret
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	08 95       	ret
	{
		if(dir == OUTPUT)
 12e:	41 30       	cpi	r20, 0x01	; 1
 130:	51 f7       	brne	.-44     	; 0x106 <IO_PinDir+0x3a>
 132:	da cf       	rjmp	.-76     	; 0xe8 <IO_PinDir+0x1c>

00000134 <IO_PortRangeDir>:
	return checkPin ;
}

/* FUNCTION(3) */
U8 IO_PortRangeDir(U8 portBase, U8 firstPin, U8 lastPin, U8 dir)
{
 134:	e8 2f       	mov	r30, r24
	U8 checkPins= 0, i ;
	if(TRUE_PORT(portBase)&& TRUE_PIN(firstPin)&& TRUE_PIN(lastPin)&& TRUE_DIR(dir))
 136:	89 33       	cpi	r24, 0x39	; 57
 138:	31 f0       	breq	.+12     	; 0x146 <IO_PortRangeDir+0x12>
 13a:	86 33       	cpi	r24, 0x36	; 54
 13c:	21 f0       	breq	.+8      	; 0x146 <IO_PortRangeDir+0x12>
 13e:	83 33       	cpi	r24, 0x33	; 51
 140:	11 f0       	breq	.+4      	; 0x146 <IO_PortRangeDir+0x12>
 142:	80 33       	cpi	r24, 0x30	; 48
 144:	d1 f5       	brne	.+116    	; 0x1ba <IO_PortRangeDir+0x86>
 146:	68 30       	cpi	r22, 0x08	; 8
 148:	d0 f5       	brcc	.+116    	; 0x1be <IO_PortRangeDir+0x8a>
 14a:	48 30       	cpi	r20, 0x08	; 8
 14c:	d0 f5       	brcc	.+116    	; 0x1c2 <IO_PortRangeDir+0x8e>
 14e:	22 30       	cpi	r18, 0x02	; 2
 150:	d0 f5       	brcc	.+116    	; 0x1c6 <IO_PortRangeDir+0x92>
	{
		if(firstPin> lastPin)
 152:	46 17       	cp	r20, r22
 154:	d0 f5       	brcc	.+116    	; 0x1ca <IO_PortRangeDir+0x96>
		{
			firstPin^= lastPin;
 156:	64 27       	eor	r22, r20
			lastPin^= firstPin;
 158:	46 27       	eor	r20, r22
			firstPin^= lastPin;
 15a:	64 27       	eor	r22, r20
		}
		checkPins= (lastPin- firstPin) +1;
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	84 0f       	add	r24, r20
 160:	86 1b       	sub	r24, r22
		if(dir == OUTPUT)
 162:	21 30       	cpi	r18, 0x01	; 1
 164:	19 f0       	breq	.+6      	; 0x16c <IO_PortRangeDir+0x38>
			for(i= firstPin; i<= lastPin ; i++ )
				SET_BIT(DDR(portBase),i);
		else
			for(i= firstPin; i<= lastPin ; i++ )
 166:	46 17       	cp	r20, r22
 168:	a8 f4       	brcc	.+42     	; 0x194 <IO_PortRangeDir+0x60>
 16a:	08 95       	ret
			lastPin^= firstPin;
			firstPin^= lastPin;
		}
		checkPins= (lastPin- firstPin) +1;
		if(dir == OUTPUT)
			for(i= firstPin; i<= lastPin ; i++ )
 16c:	46 17       	cp	r20, r22
 16e:	98 f1       	brcs	.+102    	; 0x1d6 <IO_PortRangeDir+0xa2>
				SET_BIT(DDR(portBase),i);
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	31 96       	adiw	r30, 0x01	; 1
 174:	a1 e0       	ldi	r26, 0x01	; 1
 176:	b0 e0       	ldi	r27, 0x00	; 0
 178:	90 81       	ld	r25, Z
 17a:	9d 01       	movw	r18, r26
 17c:	06 2e       	mov	r0, r22
 17e:	02 c0       	rjmp	.+4      	; 0x184 <IO_PortRangeDir+0x50>
 180:	22 0f       	add	r18, r18
 182:	33 1f       	adc	r19, r19
 184:	0a 94       	dec	r0
 186:	e2 f7       	brpl	.-8      	; 0x180 <IO_PortRangeDir+0x4c>
 188:	29 2b       	or	r18, r25
 18a:	20 83       	st	Z, r18
			lastPin^= firstPin;
			firstPin^= lastPin;
		}
		checkPins= (lastPin- firstPin) +1;
		if(dir == OUTPUT)
			for(i= firstPin; i<= lastPin ; i++ )
 18c:	6f 5f       	subi	r22, 0xFF	; 255
 18e:	46 17       	cp	r20, r22
 190:	98 f7       	brcc	.-26     	; 0x178 <IO_PortRangeDir+0x44>
 192:	08 95       	ret
				SET_BIT(DDR(portBase),i);
		else
			for(i= firstPin; i<= lastPin ; i++ )
				CLR_BIT(DDR(portBase),i);
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	31 96       	adiw	r30, 0x01	; 1
 198:	a1 e0       	ldi	r26, 0x01	; 1
 19a:	b0 e0       	ldi	r27, 0x00	; 0
 19c:	90 81       	ld	r25, Z
 19e:	9d 01       	movw	r18, r26
 1a0:	06 2e       	mov	r0, r22
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <IO_PortRangeDir+0x74>
 1a4:	22 0f       	add	r18, r18
 1a6:	33 1f       	adc	r19, r19
 1a8:	0a 94       	dec	r0
 1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <IO_PortRangeDir+0x70>
 1ac:	20 95       	com	r18
 1ae:	29 23       	and	r18, r25
 1b0:	20 83       	st	Z, r18
		checkPins= (lastPin- firstPin) +1;
		if(dir == OUTPUT)
			for(i= firstPin; i<= lastPin ; i++ )
				SET_BIT(DDR(portBase),i);
		else
			for(i= firstPin; i<= lastPin ; i++ )
 1b2:	6f 5f       	subi	r22, 0xFF	; 255
 1b4:	46 17       	cp	r20, r22
 1b6:	90 f7       	brcc	.-28     	; 0x19c <IO_PortRangeDir+0x68>
 1b8:	08 95       	ret
}

/* FUNCTION(3) */
U8 IO_PortRangeDir(U8 portBase, U8 firstPin, U8 lastPin, U8 dir)
{
	U8 checkPins= 0, i ;
 1ba:	80 e0       	ldi	r24, 0x00	; 0
 1bc:	08 95       	ret
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	08 95       	ret
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	08 95       	ret
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	08 95       	ret
		{
			firstPin^= lastPin;
			lastPin^= firstPin;
			firstPin^= lastPin;
		}
		checkPins= (lastPin- firstPin) +1;
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	84 0f       	add	r24, r20
 1ce:	86 1b       	sub	r24, r22
		if(dir == OUTPUT)
 1d0:	21 30       	cpi	r18, 0x01	; 1
 1d2:	01 f7       	brne	.-64     	; 0x194 <IO_PortRangeDir+0x60>
 1d4:	cb cf       	rjmp	.-106    	; 0x16c <IO_PortRangeDir+0x38>
		else
			for(i= firstPin; i<= lastPin ; i++ )
				CLR_BIT(DDR(portBase),i);
	}
	return checkPins;
}
 1d6:	08 95       	ret

000001d8 <IO_PortWrite>:

/* FUNCTION(5) */
U8 IO_PortWrite(U8 portBase, U8 val )
{
	U8 checkPins= 0;
	if( TRUE_PORT(portBase) && val<= 0xff )
 1d8:	89 33       	cpi	r24, 0x39	; 57
 1da:	31 f0       	breq	.+12     	; 0x1e8 <IO_PortWrite+0x10>
 1dc:	86 33       	cpi	r24, 0x36	; 54
 1de:	21 f0       	breq	.+8      	; 0x1e8 <IO_PortWrite+0x10>
 1e0:	83 33       	cpi	r24, 0x33	; 51
 1e2:	11 f0       	breq	.+4      	; 0x1e8 <IO_PortWrite+0x10>
 1e4:	80 33       	cpi	r24, 0x30	; 48
 1e6:	29 f4       	brne	.+10     	; 0x1f2 <IO_PortWrite+0x1a>
	{
		PORT(portBase)= val;
 1e8:	e8 2f       	mov	r30, r24
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	62 83       	std	Z+2, r22	; 0x02
		checkPins= 0x08;
 1ee:	88 e0       	ldi	r24, 0x08	; 8
 1f0:	08 95       	ret
/*********************************************************************************************************/

/* FUNCTION(5) */
U8 IO_PortWrite(U8 portBase, U8 val )
{
	U8 checkPins= 0;
 1f2:	80 e0       	ldi	r24, 0x00	; 0
	{
		PORT(portBase)= val;
		checkPins= 0x08;
	}
	return checkPins;
}
 1f4:	08 95       	ret

000001f6 <IO_PinWrite>:

/* FUNCTION(6) */
U8 IO_PinWrite(U8 portBase, U8 pin, U8 val)
{
	U8 checkPin= 0;
	if( checkPin= (TRUE_PORT(portBase) && TRUE_PIN(pin) && (val==0||val==1)) )
 1f6:	89 33       	cpi	r24, 0x39	; 57
 1f8:	31 f0       	breq	.+12     	; 0x206 <IO_PinWrite+0x10>
 1fa:	86 33       	cpi	r24, 0x36	; 54
 1fc:	21 f0       	breq	.+8      	; 0x206 <IO_PinWrite+0x10>
 1fe:	83 33       	cpi	r24, 0x33	; 51
 200:	11 f0       	breq	.+4      	; 0x206 <IO_PinWrite+0x10>
 202:	80 33       	cpi	r24, 0x30	; 48
 204:	29 f5       	brne	.+74     	; 0x250 <IO_PinWrite+0x5a>
 206:	68 30       	cpi	r22, 0x08	; 8
 208:	28 f5       	brcc	.+74     	; 0x254 <IO_PinWrite+0x5e>
 20a:	42 30       	cpi	r20, 0x02	; 2
 20c:	28 f1       	brcs	.+74     	; 0x258 <IO_PinWrite+0x62>
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	08 95       	ret
	{
		if(val == 1)
		SET_BIT(PORT(portBase),pin);
 212:	e8 2f       	mov	r30, r24
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	22 81       	ldd	r18, Z+2	; 0x02
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	ac 01       	movw	r20, r24
 21e:	02 c0       	rjmp	.+4      	; 0x224 <IO_PinWrite+0x2e>
 220:	44 0f       	add	r20, r20
 222:	55 1f       	adc	r21, r21
 224:	6a 95       	dec	r22
 226:	e2 f7       	brpl	.-8      	; 0x220 <IO_PinWrite+0x2a>
 228:	ba 01       	movw	r22, r20
 22a:	62 2b       	or	r22, r18
 22c:	62 83       	std	Z+2, r22	; 0x02
 22e:	08 95       	ret
		else
		CLR_BIT(PORT(portBase),pin);
 230:	e8 2f       	mov	r30, r24
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	22 81       	ldd	r18, Z+2	; 0x02
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	ac 01       	movw	r20, r24
 23c:	02 c0       	rjmp	.+4      	; 0x242 <IO_PinWrite+0x4c>
 23e:	44 0f       	add	r20, r20
 240:	55 1f       	adc	r21, r21
 242:	6a 95       	dec	r22
 244:	e2 f7       	brpl	.-8      	; 0x23e <IO_PinWrite+0x48>
 246:	ba 01       	movw	r22, r20
 248:	60 95       	com	r22
 24a:	62 23       	and	r22, r18
 24c:	62 83       	std	Z+2, r22	; 0x02
 24e:	08 95       	ret

/* FUNCTION(6) */
U8 IO_PinWrite(U8 portBase, U8 pin, U8 val)
{
	U8 checkPin= 0;
	if( checkPin= (TRUE_PORT(portBase) && TRUE_PIN(pin) && (val==0||val==1)) )
 250:	80 e0       	ldi	r24, 0x00	; 0
 252:	08 95       	ret
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	08 95       	ret
	{
		if(val == 1)
 258:	41 30       	cpi	r20, 0x01	; 1
 25a:	51 f7       	brne	.-44     	; 0x230 <IO_PinWrite+0x3a>
 25c:	da cf       	rjmp	.-76     	; 0x212 <IO_PinWrite+0x1c>

0000025e <LMTRX5x7_DrawAlpha>:


#include "ledmatrix_5X7.h"

U8 LMTRX5x7_DrawAlpha( U8 alpha, U16 timeDelay_ms )
{
 25e:	2f 92       	push	r2
 260:	3f 92       	push	r3
 262:	4f 92       	push	r4
 264:	5f 92       	push	r5
 266:	6f 92       	push	r6
 268:	7f 92       	push	r7
 26a:	8f 92       	push	r8
 26c:	9f 92       	push	r9
 26e:	af 92       	push	r10
 270:	bf 92       	push	r11
 272:	cf 92       	push	r12
 274:	df 92       	push	r13
 276:	ef 92       	push	r14
 278:	ff 92       	push	r15
 27a:	0f 93       	push	r16
 27c:	1f 93       	push	r17
 27e:	cf 93       	push	r28
 280:	df 93       	push	r29
 282:	cd b7       	in	r28, 0x3d	; 61
 284:	de b7       	in	r29, 0x3e	; 62
 286:	c2 58       	subi	r28, 0x82	; 130
 288:	d1 09       	sbc	r29, r1
 28a:	0f b6       	in	r0, 0x3f	; 63
 28c:	f8 94       	cli
 28e:	de bf       	out	0x3e, r29	; 62
 290:	0f be       	out	0x3f, r0	; 63
 292:	cd bf       	out	0x3d, r28	; 61
 294:	f8 2e       	mov	r15, r24
 296:	8b 01       	movw	r16, r22
	U8 check = 0, i= 0, k= 0, column= 0;
	U16 x= 0, j= 0;
	U8 alpha_draw[26][5]= {
 298:	82 e8       	ldi	r24, 0x82	; 130
 29a:	e4 e6       	ldi	r30, 0x64	; 100
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	de 01       	movw	r26, r28
 2a0:	11 96       	adiw	r26, 0x01	; 1
 2a2:	01 90       	ld	r0, Z+
 2a4:	0d 92       	st	X+, r0
 2a6:	8a 95       	dec	r24
 2a8:	e1 f7       	brne	.-8      	; 0x2a2 <LMTRX5x7_DrawAlpha+0x44>
		{0x7C, 0x7B, 0x07, 0x7B, 0x7C}, // y
		{0x3C, 0x3A, 0x36, 0x2E, 0x1E}  // z

	};
	
	if(		TRUE_ALPHA(alpha) 
 2aa:	8f eb       	ldi	r24, 0xBF	; 191
 2ac:	8f 0d       	add	r24, r15
 2ae:	8a 31       	cpi	r24, 0x1A	; 26
 2b0:	08 f0       	brcs	.+2      	; 0x2b4 <LMTRX5x7_DrawAlpha+0x56>
 2b2:	98 c0       	rjmp	.+304    	; 0x3e4 <LMTRX5x7_DrawAlpha+0x186>
			&& TRUE_DELAY(timeDelay_ms) 
			&& TRUE_PORT(LMatrix.RowPort) 
 2b4:	90 91 60 00 	lds	r25, 0x0060
 2b8:	99 33       	cpi	r25, 0x39	; 57
 2ba:	39 f0       	breq	.+14     	; 0x2ca <LMTRX5x7_DrawAlpha+0x6c>
 2bc:	96 33       	cpi	r25, 0x36	; 54
 2be:	29 f0       	breq	.+10     	; 0x2ca <LMTRX5x7_DrawAlpha+0x6c>
 2c0:	93 33       	cpi	r25, 0x33	; 51
 2c2:	19 f0       	breq	.+6      	; 0x2ca <LMTRX5x7_DrawAlpha+0x6c>
 2c4:	90 33       	cpi	r25, 0x30	; 48
 2c6:	09 f0       	breq	.+2      	; 0x2ca <LMTRX5x7_DrawAlpha+0x6c>
 2c8:	8f c0       	rjmp	.+286    	; 0x3e8 <LMTRX5x7_DrawAlpha+0x18a>
			&& TRUE_PORT(LMatrix.ColumnPort)
 2ca:	90 91 62 00 	lds	r25, 0x0062
 2ce:	99 33       	cpi	r25, 0x39	; 57
 2d0:	39 f0       	breq	.+14     	; 0x2e0 <LMTRX5x7_DrawAlpha+0x82>
 2d2:	96 33       	cpi	r25, 0x36	; 54
 2d4:	29 f0       	breq	.+10     	; 0x2e0 <LMTRX5x7_DrawAlpha+0x82>
 2d6:	93 33       	cpi	r25, 0x33	; 51
 2d8:	19 f0       	breq	.+6      	; 0x2e0 <LMTRX5x7_DrawAlpha+0x82>
 2da:	90 33       	cpi	r25, 0x30	; 48
 2dc:	09 f0       	breq	.+2      	; 0x2e0 <LMTRX5x7_DrawAlpha+0x82>
 2de:	86 c0       	rjmp	.+268    	; 0x3ec <LMTRX5x7_DrawAlpha+0x18e>
			&& TRUE_ROWPIN(LMatrix.FirstRowPin)
 2e0:	80 91 61 00 	lds	r24, 0x0061
 2e4:	82 30       	cpi	r24, 0x02	; 2
 2e6:	08 f0       	brcs	.+2      	; 0x2ea <LMTRX5x7_DrawAlpha+0x8c>
 2e8:	83 c0       	rjmp	.+262    	; 0x3f0 <LMTRX5x7_DrawAlpha+0x192>
			&& TRUE_COLUMNPIN(LMatrix.FirstColumnPin)	)
 2ea:	60 91 63 00 	lds	r22, 0x0063
 2ee:	64 30       	cpi	r22, 0x04	; 4
 2f0:	08 f0       	brcs	.+2      	; 0x2f4 <LMTRX5x7_DrawAlpha+0x96>
 2f2:	80 c0       	rjmp	.+256    	; 0x3f4 <LMTRX5x7_DrawAlpha+0x196>
	{
		check= 1;
		IO_PortRangeDir(LMatrix.ColumnPort,LMatrix.FirstColumnPin,LMatrix.FirstColumnPin+4,OUTPUT);
 2f4:	44 e0       	ldi	r20, 0x04	; 4
 2f6:	46 0f       	add	r20, r22
 2f8:	21 e0       	ldi	r18, 0x01	; 1
 2fa:	89 2f       	mov	r24, r25
 2fc:	0e 94 9a 00 	call	0x134	; 0x134 <IO_PortRangeDir>
		IO_PortRangeDir(LMatrix.RowPort,LMatrix.FirstRowPin,LMatrix.FirstRowPin+6,OUTPUT);
 300:	60 91 61 00 	lds	r22, 0x0061
 304:	46 e0       	ldi	r20, 0x06	; 6
 306:	46 0f       	add	r20, r22
 308:	21 e0       	ldi	r18, 0x01	; 1
 30a:	80 91 60 00 	lds	r24, 0x0060
 30e:	0e 94 9a 00 	call	0x134	; 0x134 <IO_PortRangeDir>
		
		for( i= 0 ; i< timeDelay_ms/100 ; i++ )
 312:	98 01       	movw	r18, r16
 314:	36 95       	lsr	r19
 316:	27 95       	ror	r18
 318:	36 95       	lsr	r19
 31a:	27 95       	ror	r18
 31c:	ab e7       	ldi	r26, 0x7B	; 123
 31e:	b4 e1       	ldi	r27, 0x14	; 20
 320:	0e 94 00 03 	call	0x600	; 0x600 <__umulhisi3>
 324:	4c 01       	movw	r8, r24
 326:	96 94       	lsr	r9
 328:	87 94       	ror	r8
 32a:	81 14       	cp	r8, r1
 32c:	91 04       	cpc	r9, r1
 32e:	09 f4       	brne	.+2      	; 0x332 <LMTRX5x7_DrawAlpha+0xd4>
 330:	63 c0       	rjmp	.+198    	; 0x3f8 <LMTRX5x7_DrawAlpha+0x19a>
 332:	31 2c       	mov	r3, r1
			{
				for( k= 0, column= 1 ; k< 5 ; k++, column<<=1 )
				{
					PORT(LMatrix.ColumnPort)= column;
					PORT(LMatrix.RowPort)= alpha_draw[alpha-65][k];
					x= 0;	while(x++ < 17);
 334:	0f 2e       	mov	r0, r31
 336:	f5 e0       	ldi	r31, 0x05	; 5
 338:	2f 2e       	mov	r2, r31
 33a:	f0 2d       	mov	r31, r0
			for( j= 0; j< 1500 ; j++) // 10 ms when F_CPU= 8000,000
			{
				for( k= 0, column= 1 ; k< 5 ; k++, column<<=1 )
				{
					PORT(LMatrix.ColumnPort)= column;
					PORT(LMatrix.RowPort)= alpha_draw[alpha-65][k];
 33c:	8f 2d       	mov	r24, r15
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	81 54       	subi	r24, 0x41	; 65
 342:	91 09       	sbc	r25, r1
 344:	9c 01       	movw	r18, r24
 346:	22 0f       	add	r18, r18
 348:	33 1f       	adc	r19, r19
 34a:	22 0f       	add	r18, r18
 34c:	33 1f       	adc	r19, r19
 34e:	82 0f       	add	r24, r18
 350:	93 1f       	adc	r25, r19
		for( i= 0 ; i< timeDelay_ms/100 ; i++ )
			for( j= 0; j< 1500 ; j++) // 10 ms when F_CPU= 8000,000
			{
				for( k= 0, column= 1 ; k< 5 ; k++, column<<=1 )
				{
					PORT(LMatrix.ColumnPort)= column;
 352:	0f 2e       	mov	r0, r31
 354:	f2 e6       	ldi	r31, 0x62	; 98
 356:	ef 2e       	mov	r14, r31
 358:	f0 e0       	ldi	r31, 0x00	; 0
 35a:	ff 2e       	mov	r15, r31
 35c:	f0 2d       	mov	r31, r0
					PORT(LMatrix.RowPort)= alpha_draw[alpha-65][k];
 35e:	00 e6       	ldi	r16, 0x60	; 96
 360:	10 e0       	ldi	r17, 0x00	; 0
 362:	aa 24       	eor	r10, r10
 364:	a3 94       	inc	r10
 366:	b1 2c       	mov	r11, r1
 368:	ac 0e       	add	r10, r28
 36a:	bd 1e       	adc	r11, r29
 36c:	a8 0e       	add	r10, r24
 36e:	b9 1e       	adc	r11, r25
					x= 0;	while(x++ < 17);
 370:	0f 2e       	mov	r0, r31
 372:	f2 e1       	ldi	r31, 0x12	; 18
 374:	6f 2e       	mov	r6, r31
 376:	f0 2d       	mov	r31, r0
 378:	71 2c       	mov	r7, r1
 37a:	2b c0       	rjmp	.+86     	; 0x3d2 <LMTRX5x7_DrawAlpha+0x174>
		for( i= 0 ; i< timeDelay_ms/100 ; i++ )
			for( j= 0; j< 1500 ; j++) // 10 ms when F_CPU= 8000,000
			{
				for( k= 0, column= 1 ; k< 5 ; k++, column<<=1 )
				{
					PORT(LMatrix.ColumnPort)= column;
 37c:	d7 01       	movw	r26, r14
 37e:	8c 91       	ld	r24, X
 380:	a8 2f       	mov	r26, r24
 382:	b0 e0       	ldi	r27, 0x00	; 0
 384:	12 96       	adiw	r26, 0x02	; 2
 386:	3c 93       	st	X, r19
					PORT(LMatrix.RowPort)= alpha_draw[alpha-65][k];
 388:	d8 01       	movw	r26, r16
 38a:	8c 91       	ld	r24, X
 38c:	a8 2f       	mov	r26, r24
 38e:	b0 e0       	ldi	r27, 0x00	; 0
 390:	81 91       	ld	r24, Z+
 392:	12 96       	adiw	r26, 0x02	; 2
 394:	8c 93       	st	X, r24
					x= 0;	while(x++ < 17);
 396:	86 2d       	mov	r24, r6
 398:	97 2d       	mov	r25, r7
 39a:	01 97       	sbiw	r24, 0x01	; 1
 39c:	00 97       	sbiw	r24, 0x00	; 0
 39e:	e9 f7       	brne	.-6      	; 0x39a <LMTRX5x7_DrawAlpha+0x13c>
		IO_PortRangeDir(LMatrix.RowPort,LMatrix.FirstRowPin,LMatrix.FirstRowPin+6,OUTPUT);
		
		for( i= 0 ; i< timeDelay_ms/100 ; i++ )
			for( j= 0; j< 1500 ; j++) // 10 ms when F_CPU= 8000,000
			{
				for( k= 0, column= 1 ; k< 5 ; k++, column<<=1 )
 3a0:	2f 5f       	subi	r18, 0xFF	; 255
 3a2:	33 0f       	add	r19, r19
 3a4:	25 30       	cpi	r18, 0x05	; 5
 3a6:	51 f7       	brne	.-44     	; 0x37c <LMTRX5x7_DrawAlpha+0x11e>
				{
					PORT(LMatrix.ColumnPort)= column;
					PORT(LMatrix.RowPort)= alpha_draw[alpha-65][k];
					x= 0;	while(x++ < 17);
				}
				IO_PortWrite(LMatrix.RowPort,0xff);
 3a8:	6f ef       	ldi	r22, 0xFF	; 255
 3aa:	f8 01       	movw	r30, r16
 3ac:	80 81       	ld	r24, Z
 3ae:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <IO_PortWrite>
 3b2:	f1 e0       	ldi	r31, 0x01	; 1
 3b4:	cf 1a       	sub	r12, r31
 3b6:	d1 08       	sbc	r13, r1
		check= 1;
		IO_PortRangeDir(LMatrix.ColumnPort,LMatrix.FirstColumnPin,LMatrix.FirstColumnPin+4,OUTPUT);
		IO_PortRangeDir(LMatrix.RowPort,LMatrix.FirstRowPin,LMatrix.FirstRowPin+6,OUTPUT);
		
		for( i= 0 ; i< timeDelay_ms/100 ; i++ )
			for( j= 0; j< 1500 ; j++) // 10 ms when F_CPU= 8000,000
 3b8:	c1 14       	cp	r12, r1
 3ba:	d1 04       	cpc	r13, r1
 3bc:	21 f0       	breq	.+8      	; 0x3c6 <LMTRX5x7_DrawAlpha+0x168>
 3be:	f5 01       	movw	r30, r10
			{
				for( k= 0, column= 1 ; k< 5 ; k++, column<<=1 )
				{
					PORT(LMatrix.ColumnPort)= column;
					PORT(LMatrix.RowPort)= alpha_draw[alpha-65][k];
 3c0:	34 2d       	mov	r19, r4
 3c2:	25 2d       	mov	r18, r5
 3c4:	db cf       	rjmp	.-74     	; 0x37c <LMTRX5x7_DrawAlpha+0x11e>
	{
		check= 1;
		IO_PortRangeDir(LMatrix.ColumnPort,LMatrix.FirstColumnPin,LMatrix.FirstColumnPin+4,OUTPUT);
		IO_PortRangeDir(LMatrix.RowPort,LMatrix.FirstRowPin,LMatrix.FirstRowPin+6,OUTPUT);
		
		for( i= 0 ; i< timeDelay_ms/100 ; i++ )
 3c6:	33 94       	inc	r3
 3c8:	83 2d       	mov	r24, r3
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	88 15       	cp	r24, r8
 3ce:	99 05       	cpc	r25, r9
 3d0:	a8 f4       	brcc	.+42     	; 0x3fc <LMTRX5x7_DrawAlpha+0x19e>
			{
				for( k= 0, column= 1 ; k< 5 ; k++, column<<=1 )
				{
					PORT(LMatrix.ColumnPort)= column;
					PORT(LMatrix.RowPort)= alpha_draw[alpha-65][k];
					x= 0;	while(x++ < 17);
 3d2:	0f 2e       	mov	r0, r31
 3d4:	fc ed       	ldi	r31, 0xDC	; 220
 3d6:	cf 2e       	mov	r12, r31
 3d8:	f0 2d       	mov	r31, r0
 3da:	d2 2c       	mov	r13, r2
			for( j= 0; j< 1500 ; j++) // 10 ms when F_CPU= 8000,000
			{
				for( k= 0, column= 1 ; k< 5 ; k++, column<<=1 )
				{
					PORT(LMatrix.ColumnPort)= column;
					PORT(LMatrix.RowPort)= alpha_draw[alpha-65][k];
 3dc:	44 24       	eor	r4, r4
 3de:	43 94       	inc	r4
 3e0:	51 2c       	mov	r5, r1
 3e2:	ed cf       	rjmp	.-38     	; 0x3be <LMTRX5x7_DrawAlpha+0x160>

#include "ledmatrix_5X7.h"

U8 LMTRX5x7_DrawAlpha( U8 alpha, U16 timeDelay_ms )
{
	U8 check = 0, i= 0, k= 0, column= 0;
 3e4:	80 e0       	ldi	r24, 0x00	; 0
 3e6:	0b c0       	rjmp	.+22     	; 0x3fe <LMTRX5x7_DrawAlpha+0x1a0>
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	09 c0       	rjmp	.+18     	; 0x3fe <LMTRX5x7_DrawAlpha+0x1a0>
 3ec:	80 e0       	ldi	r24, 0x00	; 0
 3ee:	07 c0       	rjmp	.+14     	; 0x3fe <LMTRX5x7_DrawAlpha+0x1a0>
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	05 c0       	rjmp	.+10     	; 0x3fe <LMTRX5x7_DrawAlpha+0x1a0>
 3f4:	80 e0       	ldi	r24, 0x00	; 0
 3f6:	03 c0       	rjmp	.+6      	; 0x3fe <LMTRX5x7_DrawAlpha+0x1a0>
			&& TRUE_PORT(LMatrix.RowPort) 
			&& TRUE_PORT(LMatrix.ColumnPort)
			&& TRUE_ROWPIN(LMatrix.FirstRowPin)
			&& TRUE_COLUMNPIN(LMatrix.FirstColumnPin)	)
	{
		check= 1;
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	01 c0       	rjmp	.+2      	; 0x3fe <LMTRX5x7_DrawAlpha+0x1a0>
 3fc:	81 e0       	ldi	r24, 0x01	; 1
				}
				IO_PortWrite(LMatrix.RowPort,0xff);
			}
	}
	return check ;
}
 3fe:	ce 57       	subi	r28, 0x7E	; 126
 400:	df 4f       	sbci	r29, 0xFF	; 255
 402:	0f b6       	in	r0, 0x3f	; 63
 404:	f8 94       	cli
 406:	de bf       	out	0x3e, r29	; 62
 408:	0f be       	out	0x3f, r0	; 63
 40a:	cd bf       	out	0x3d, r28	; 61
 40c:	df 91       	pop	r29
 40e:	cf 91       	pop	r28
 410:	1f 91       	pop	r17
 412:	0f 91       	pop	r16
 414:	ff 90       	pop	r15
 416:	ef 90       	pop	r14
 418:	df 90       	pop	r13
 41a:	cf 90       	pop	r12
 41c:	bf 90       	pop	r11
 41e:	af 90       	pop	r10
 420:	9f 90       	pop	r9
 422:	8f 90       	pop	r8
 424:	7f 90       	pop	r7
 426:	6f 90       	pop	r6
 428:	5f 90       	pop	r5
 42a:	4f 90       	pop	r4
 42c:	3f 90       	pop	r3
 42e:	2f 90       	pop	r2
 430:	08 95       	ret

00000432 <LMTRX5x7_DrawDigit>:


U8 LMTRX5x7_DrawDigit( U8 digit, U16 timeDelay_ms )
{
 432:	2f 92       	push	r2
 434:	3f 92       	push	r3
 436:	4f 92       	push	r4
 438:	5f 92       	push	r5
 43a:	6f 92       	push	r6
 43c:	7f 92       	push	r7
 43e:	8f 92       	push	r8
 440:	9f 92       	push	r9
 442:	af 92       	push	r10
 444:	bf 92       	push	r11
 446:	cf 92       	push	r12
 448:	df 92       	push	r13
 44a:	ef 92       	push	r14
 44c:	ff 92       	push	r15
 44e:	0f 93       	push	r16
 450:	1f 93       	push	r17
 452:	cf 93       	push	r28
 454:	df 93       	push	r29
 456:	cd b7       	in	r28, 0x3d	; 61
 458:	de b7       	in	r29, 0x3e	; 62
 45a:	e2 97       	sbiw	r28, 0x32	; 50
 45c:	0f b6       	in	r0, 0x3f	; 63
 45e:	f8 94       	cli
 460:	de bf       	out	0x3e, r29	; 62
 462:	0f be       	out	0x3f, r0	; 63
 464:	cd bf       	out	0x3d, r28	; 61
 466:	f8 2e       	mov	r15, r24
 468:	8b 01       	movw	r16, r22
	U8 check = 0, i= 0, k= 0, column= 0;
	U16 x= 0, j= 0;
	U8 digit_draw[10][5]= {
 46a:	82 e3       	ldi	r24, 0x32	; 50
 46c:	e6 ee       	ldi	r30, 0xE6	; 230
 46e:	f0 e0       	ldi	r31, 0x00	; 0
 470:	de 01       	movw	r26, r28
 472:	11 96       	adiw	r26, 0x01	; 1
 474:	01 90       	ld	r0, Z+
 476:	0d 92       	st	X+, r0
 478:	8a 95       	dec	r24
 47a:	e1 f7       	brne	.-8      	; 0x474 <LMTRX5x7_DrawDigit+0x42>
		{0x78, 0x76, 0x6E, 0x5E, 0x3E}, // 7
		{0x41, 0x36, 0x36, 0x36, 0x41}, // 8
		{0x41, 0x36, 0x36, 0x36, 0x31}  // 9
	};
	
	if(		TRUE_DIGIT(digit)
 47c:	80 ed       	ldi	r24, 0xD0	; 208
 47e:	8f 0d       	add	r24, r15
 480:	8a 30       	cpi	r24, 0x0A	; 10
 482:	08 f0       	brcs	.+2      	; 0x486 <LMTRX5x7_DrawDigit+0x54>
 484:	97 c0       	rjmp	.+302    	; 0x5b4 <LMTRX5x7_DrawDigit+0x182>
			&& TRUE_DELAY(timeDelay_ms)
			&& TRUE_PORT(LMatrix.RowPort)
 486:	90 91 60 00 	lds	r25, 0x0060
 48a:	99 33       	cpi	r25, 0x39	; 57
 48c:	39 f0       	breq	.+14     	; 0x49c <LMTRX5x7_DrawDigit+0x6a>
 48e:	96 33       	cpi	r25, 0x36	; 54
 490:	29 f0       	breq	.+10     	; 0x49c <LMTRX5x7_DrawDigit+0x6a>
 492:	93 33       	cpi	r25, 0x33	; 51
 494:	19 f0       	breq	.+6      	; 0x49c <LMTRX5x7_DrawDigit+0x6a>
 496:	90 33       	cpi	r25, 0x30	; 48
 498:	09 f0       	breq	.+2      	; 0x49c <LMTRX5x7_DrawDigit+0x6a>
 49a:	8e c0       	rjmp	.+284    	; 0x5b8 <LMTRX5x7_DrawDigit+0x186>
			&& TRUE_PORT(LMatrix.ColumnPort)
 49c:	90 91 62 00 	lds	r25, 0x0062
 4a0:	99 33       	cpi	r25, 0x39	; 57
 4a2:	39 f0       	breq	.+14     	; 0x4b2 <LMTRX5x7_DrawDigit+0x80>
 4a4:	96 33       	cpi	r25, 0x36	; 54
 4a6:	29 f0       	breq	.+10     	; 0x4b2 <LMTRX5x7_DrawDigit+0x80>
 4a8:	93 33       	cpi	r25, 0x33	; 51
 4aa:	19 f0       	breq	.+6      	; 0x4b2 <LMTRX5x7_DrawDigit+0x80>
 4ac:	90 33       	cpi	r25, 0x30	; 48
 4ae:	09 f0       	breq	.+2      	; 0x4b2 <LMTRX5x7_DrawDigit+0x80>
 4b0:	85 c0       	rjmp	.+266    	; 0x5bc <LMTRX5x7_DrawDigit+0x18a>
			&& TRUE_ROWPIN(LMatrix.FirstRowPin)
 4b2:	80 91 61 00 	lds	r24, 0x0061
 4b6:	82 30       	cpi	r24, 0x02	; 2
 4b8:	08 f0       	brcs	.+2      	; 0x4bc <LMTRX5x7_DrawDigit+0x8a>
 4ba:	82 c0       	rjmp	.+260    	; 0x5c0 <LMTRX5x7_DrawDigit+0x18e>
			&& TRUE_COLUMNPIN(LMatrix.FirstColumnPin)	)
 4bc:	60 91 63 00 	lds	r22, 0x0063
 4c0:	64 30       	cpi	r22, 0x04	; 4
 4c2:	08 f0       	brcs	.+2      	; 0x4c6 <LMTRX5x7_DrawDigit+0x94>
 4c4:	7f c0       	rjmp	.+254    	; 0x5c4 <LMTRX5x7_DrawDigit+0x192>
	{
		check= 1;
		IO_PortRangeDir(LMatrix.ColumnPort,LMatrix.FirstColumnPin,LMatrix.FirstColumnPin+4,OUTPUT);
 4c6:	44 e0       	ldi	r20, 0x04	; 4
 4c8:	46 0f       	add	r20, r22
 4ca:	21 e0       	ldi	r18, 0x01	; 1
 4cc:	89 2f       	mov	r24, r25
 4ce:	0e 94 9a 00 	call	0x134	; 0x134 <IO_PortRangeDir>
		IO_PortRangeDir(LMatrix.RowPort,LMatrix.FirstRowPin,LMatrix.FirstRowPin+6,OUTPUT);
 4d2:	60 91 61 00 	lds	r22, 0x0061
 4d6:	46 e0       	ldi	r20, 0x06	; 6
 4d8:	46 0f       	add	r20, r22
 4da:	21 e0       	ldi	r18, 0x01	; 1
 4dc:	80 91 60 00 	lds	r24, 0x0060
 4e0:	0e 94 9a 00 	call	0x134	; 0x134 <IO_PortRangeDir>
		
		for( i= 0 ; i< timeDelay_ms/100 ; i++ )
 4e4:	98 01       	movw	r18, r16
 4e6:	36 95       	lsr	r19
 4e8:	27 95       	ror	r18
 4ea:	36 95       	lsr	r19
 4ec:	27 95       	ror	r18
 4ee:	ab e7       	ldi	r26, 0x7B	; 123
 4f0:	b4 e1       	ldi	r27, 0x14	; 20
 4f2:	0e 94 00 03 	call	0x600	; 0x600 <__umulhisi3>
 4f6:	4c 01       	movw	r8, r24
 4f8:	96 94       	lsr	r9
 4fa:	87 94       	ror	r8
 4fc:	81 14       	cp	r8, r1
 4fe:	91 04       	cpc	r9, r1
 500:	09 f4       	brne	.+2      	; 0x504 <LMTRX5x7_DrawDigit+0xd2>
 502:	62 c0       	rjmp	.+196    	; 0x5c8 <LMTRX5x7_DrawDigit+0x196>
 504:	31 2c       	mov	r3, r1
		{
			for( k= 0, column= 1 ; k< 5 ; k++, column<<=1 )
			{
				PORT(LMatrix.ColumnPort)= column;
				PORT(LMatrix.RowPort)= digit_draw[digit-48][k];
				x= 0;	while(x++ < 17);
 506:	0f 2e       	mov	r0, r31
 508:	f5 e0       	ldi	r31, 0x05	; 5
 50a:	2f 2e       	mov	r2, r31
 50c:	f0 2d       	mov	r31, r0
		for( j= 0; j< 1500 ; j++) // 10 ms when F_CPU= 8000,000
		{
			for( k= 0, column= 1 ; k< 5 ; k++, column<<=1 )
			{
				PORT(LMatrix.ColumnPort)= column;
				PORT(LMatrix.RowPort)= digit_draw[digit-48][k];
 50e:	8f 2d       	mov	r24, r15
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	c0 97       	sbiw	r24, 0x30	; 48
 514:	9c 01       	movw	r18, r24
 516:	22 0f       	add	r18, r18
 518:	33 1f       	adc	r19, r19
 51a:	22 0f       	add	r18, r18
 51c:	33 1f       	adc	r19, r19
 51e:	82 0f       	add	r24, r18
 520:	93 1f       	adc	r25, r19
		for( i= 0 ; i< timeDelay_ms/100 ; i++ )
		for( j= 0; j< 1500 ; j++) // 10 ms when F_CPU= 8000,000
		{
			for( k= 0, column= 1 ; k< 5 ; k++, column<<=1 )
			{
				PORT(LMatrix.ColumnPort)= column;
 522:	0f 2e       	mov	r0, r31
 524:	f2 e6       	ldi	r31, 0x62	; 98
 526:	ef 2e       	mov	r14, r31
 528:	f0 e0       	ldi	r31, 0x00	; 0
 52a:	ff 2e       	mov	r15, r31
 52c:	f0 2d       	mov	r31, r0
				PORT(LMatrix.RowPort)= digit_draw[digit-48][k];
 52e:	00 e6       	ldi	r16, 0x60	; 96
 530:	10 e0       	ldi	r17, 0x00	; 0
 532:	aa 24       	eor	r10, r10
 534:	a3 94       	inc	r10
 536:	b1 2c       	mov	r11, r1
 538:	ac 0e       	add	r10, r28
 53a:	bd 1e       	adc	r11, r29
 53c:	a8 0e       	add	r10, r24
 53e:	b9 1e       	adc	r11, r25
				x= 0;	while(x++ < 17);
 540:	0f 2e       	mov	r0, r31
 542:	f2 e1       	ldi	r31, 0x12	; 18
 544:	6f 2e       	mov	r6, r31
 546:	f0 2d       	mov	r31, r0
 548:	71 2c       	mov	r7, r1
 54a:	2b c0       	rjmp	.+86     	; 0x5a2 <LMTRX5x7_DrawDigit+0x170>
		for( i= 0 ; i< timeDelay_ms/100 ; i++ )
		for( j= 0; j< 1500 ; j++) // 10 ms when F_CPU= 8000,000
		{
			for( k= 0, column= 1 ; k< 5 ; k++, column<<=1 )
			{
				PORT(LMatrix.ColumnPort)= column;
 54c:	d7 01       	movw	r26, r14
 54e:	8c 91       	ld	r24, X
 550:	a8 2f       	mov	r26, r24
 552:	b0 e0       	ldi	r27, 0x00	; 0
 554:	12 96       	adiw	r26, 0x02	; 2
 556:	3c 93       	st	X, r19
				PORT(LMatrix.RowPort)= digit_draw[digit-48][k];
 558:	d8 01       	movw	r26, r16
 55a:	8c 91       	ld	r24, X
 55c:	a8 2f       	mov	r26, r24
 55e:	b0 e0       	ldi	r27, 0x00	; 0
 560:	81 91       	ld	r24, Z+
 562:	12 96       	adiw	r26, 0x02	; 2
 564:	8c 93       	st	X, r24
				x= 0;	while(x++ < 17);
 566:	86 2d       	mov	r24, r6
 568:	97 2d       	mov	r25, r7
 56a:	01 97       	sbiw	r24, 0x01	; 1
 56c:	00 97       	sbiw	r24, 0x00	; 0
 56e:	e9 f7       	brne	.-6      	; 0x56a <LMTRX5x7_DrawDigit+0x138>
		IO_PortRangeDir(LMatrix.RowPort,LMatrix.FirstRowPin,LMatrix.FirstRowPin+6,OUTPUT);
		
		for( i= 0 ; i< timeDelay_ms/100 ; i++ )
		for( j= 0; j< 1500 ; j++) // 10 ms when F_CPU= 8000,000
		{
			for( k= 0, column= 1 ; k< 5 ; k++, column<<=1 )
 570:	2f 5f       	subi	r18, 0xFF	; 255
 572:	33 0f       	add	r19, r19
 574:	25 30       	cpi	r18, 0x05	; 5
 576:	51 f7       	brne	.-44     	; 0x54c <LMTRX5x7_DrawDigit+0x11a>
			{
				PORT(LMatrix.ColumnPort)= column;
				PORT(LMatrix.RowPort)= digit_draw[digit-48][k];
				x= 0;	while(x++ < 17);
			}
			IO_PortWrite(LMatrix.RowPort,0xff);
 578:	6f ef       	ldi	r22, 0xFF	; 255
 57a:	f8 01       	movw	r30, r16
 57c:	80 81       	ld	r24, Z
 57e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <IO_PortWrite>
 582:	f1 e0       	ldi	r31, 0x01	; 1
 584:	cf 1a       	sub	r12, r31
 586:	d1 08       	sbc	r13, r1
		check= 1;
		IO_PortRangeDir(LMatrix.ColumnPort,LMatrix.FirstColumnPin,LMatrix.FirstColumnPin+4,OUTPUT);
		IO_PortRangeDir(LMatrix.RowPort,LMatrix.FirstRowPin,LMatrix.FirstRowPin+6,OUTPUT);
		
		for( i= 0 ; i< timeDelay_ms/100 ; i++ )
		for( j= 0; j< 1500 ; j++) // 10 ms when F_CPU= 8000,000
 588:	c1 14       	cp	r12, r1
 58a:	d1 04       	cpc	r13, r1
 58c:	21 f0       	breq	.+8      	; 0x596 <LMTRX5x7_DrawDigit+0x164>
 58e:	f5 01       	movw	r30, r10
		{
			for( k= 0, column= 1 ; k< 5 ; k++, column<<=1 )
			{
				PORT(LMatrix.ColumnPort)= column;
				PORT(LMatrix.RowPort)= digit_draw[digit-48][k];
 590:	34 2d       	mov	r19, r4
 592:	25 2d       	mov	r18, r5
 594:	db cf       	rjmp	.-74     	; 0x54c <LMTRX5x7_DrawDigit+0x11a>
	{
		check= 1;
		IO_PortRangeDir(LMatrix.ColumnPort,LMatrix.FirstColumnPin,LMatrix.FirstColumnPin+4,OUTPUT);
		IO_PortRangeDir(LMatrix.RowPort,LMatrix.FirstRowPin,LMatrix.FirstRowPin+6,OUTPUT);
		
		for( i= 0 ; i< timeDelay_ms/100 ; i++ )
 596:	33 94       	inc	r3
 598:	83 2d       	mov	r24, r3
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	88 15       	cp	r24, r8
 59e:	99 05       	cpc	r25, r9
 5a0:	a8 f4       	brcc	.+42     	; 0x5cc <LMTRX5x7_DrawDigit+0x19a>
		{
			for( k= 0, column= 1 ; k< 5 ; k++, column<<=1 )
			{
				PORT(LMatrix.ColumnPort)= column;
				PORT(LMatrix.RowPort)= digit_draw[digit-48][k];
				x= 0;	while(x++ < 17);
 5a2:	0f 2e       	mov	r0, r31
 5a4:	fc ed       	ldi	r31, 0xDC	; 220
 5a6:	cf 2e       	mov	r12, r31
 5a8:	f0 2d       	mov	r31, r0
 5aa:	d2 2c       	mov	r13, r2
		for( j= 0; j< 1500 ; j++) // 10 ms when F_CPU= 8000,000
		{
			for( k= 0, column= 1 ; k< 5 ; k++, column<<=1 )
			{
				PORT(LMatrix.ColumnPort)= column;
				PORT(LMatrix.RowPort)= digit_draw[digit-48][k];
 5ac:	44 24       	eor	r4, r4
 5ae:	43 94       	inc	r4
 5b0:	51 2c       	mov	r5, r1
 5b2:	ed cf       	rjmp	.-38     	; 0x58e <LMTRX5x7_DrawDigit+0x15c>
}


U8 LMTRX5x7_DrawDigit( U8 digit, U16 timeDelay_ms )
{
	U8 check = 0, i= 0, k= 0, column= 0;
 5b4:	80 e0       	ldi	r24, 0x00	; 0
 5b6:	0b c0       	rjmp	.+22     	; 0x5ce <LMTRX5x7_DrawDigit+0x19c>
 5b8:	80 e0       	ldi	r24, 0x00	; 0
 5ba:	09 c0       	rjmp	.+18     	; 0x5ce <LMTRX5x7_DrawDigit+0x19c>
 5bc:	80 e0       	ldi	r24, 0x00	; 0
 5be:	07 c0       	rjmp	.+14     	; 0x5ce <LMTRX5x7_DrawDigit+0x19c>
 5c0:	80 e0       	ldi	r24, 0x00	; 0
 5c2:	05 c0       	rjmp	.+10     	; 0x5ce <LMTRX5x7_DrawDigit+0x19c>
 5c4:	80 e0       	ldi	r24, 0x00	; 0
 5c6:	03 c0       	rjmp	.+6      	; 0x5ce <LMTRX5x7_DrawDigit+0x19c>
			&& TRUE_PORT(LMatrix.RowPort)
			&& TRUE_PORT(LMatrix.ColumnPort)
			&& TRUE_ROWPIN(LMatrix.FirstRowPin)
			&& TRUE_COLUMNPIN(LMatrix.FirstColumnPin)	)
	{
		check= 1;
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	01 c0       	rjmp	.+2      	; 0x5ce <LMTRX5x7_DrawDigit+0x19c>
 5cc:	81 e0       	ldi	r24, 0x01	; 1
			}
			IO_PortWrite(LMatrix.RowPort,0xff);
		}
	}
	return check ;
 5ce:	e2 96       	adiw	r28, 0x32	; 50
 5d0:	0f b6       	in	r0, 0x3f	; 63
 5d2:	f8 94       	cli
 5d4:	de bf       	out	0x3e, r29	; 62
 5d6:	0f be       	out	0x3f, r0	; 63
 5d8:	cd bf       	out	0x3d, r28	; 61
 5da:	df 91       	pop	r29
 5dc:	cf 91       	pop	r28
 5de:	1f 91       	pop	r17
 5e0:	0f 91       	pop	r16
 5e2:	ff 90       	pop	r15
 5e4:	ef 90       	pop	r14
 5e6:	df 90       	pop	r13
 5e8:	cf 90       	pop	r12
 5ea:	bf 90       	pop	r11
 5ec:	af 90       	pop	r10
 5ee:	9f 90       	pop	r9
 5f0:	8f 90       	pop	r8
 5f2:	7f 90       	pop	r7
 5f4:	6f 90       	pop	r6
 5f6:	5f 90       	pop	r5
 5f8:	4f 90       	pop	r4
 5fa:	3f 90       	pop	r3
 5fc:	2f 90       	pop	r2
 5fe:	08 95       	ret

00000600 <__umulhisi3>:
 600:	a2 9f       	mul	r26, r18
 602:	b0 01       	movw	r22, r0
 604:	b3 9f       	mul	r27, r19
 606:	c0 01       	movw	r24, r0
 608:	a3 9f       	mul	r26, r19
 60a:	70 0d       	add	r23, r0
 60c:	81 1d       	adc	r24, r1
 60e:	11 24       	eor	r1, r1
 610:	91 1d       	adc	r25, r1
 612:	b2 9f       	mul	r27, r18
 614:	70 0d       	add	r23, r0
 616:	81 1d       	adc	r24, r1
 618:	11 24       	eor	r1, r1
 61a:	91 1d       	adc	r25, r1
 61c:	08 95       	ret

0000061e <_exit>:
 61e:	f8 94       	cli

00000620 <__stop_program>:
 620:	ff cf       	rjmp	.-2      	; 0x620 <__stop_program>
