
seven_segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  000005c0  00000654  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800074  00800074  00000668  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000668  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000698  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000006d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000486  00000000  00000000  00000704  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000017f  00000000  00000000  00000b8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000046c  00000000  00000000  00000d09  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000006c  00000000  00000000  00001178  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001e6  00000000  00000000  000011e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000276  00000000  00000000  000013ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001640  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ec       	ldi	r30, 0xC0	; 192
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 37       	cpi	r26, 0x7D	; 125
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c1 00 	call	0x182	; 0x182 <main>
  8a:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_11>:
volatile int gCounter = 0;
volatile int gHr=0,gMin=0,gSec=0;
volatile char gMenu = 0;

ISR(TIMER0_OVF_vect)
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	8f 93       	push	r24
  9e:	9f 93       	push	r25
	if(gCounter < 4) gCounter++;
  a0:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <gCounter>
  a4:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <gCounter+0x1>
  a8:	04 97       	sbiw	r24, 0x04	; 4
  aa:	54 f4       	brge	.+20     	; 0xc0 <__vector_11+0x2e>
  ac:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <gCounter>
  b0:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <gCounter+0x1>
  b4:	01 96       	adiw	r24, 0x01	; 1
  b6:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <gCounter+0x1>
  ba:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <gCounter>
  be:	40 c0       	rjmp	.+128    	; 0x140 <__vector_11+0xae>
	else
	{
		gCounter = 0;
  c0:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <gCounter+0x1>
  c4:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <gCounter>
		if(gSec < 60) gSec++;
  c8:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <gSec>
  cc:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <gSec+0x1>
  d0:	cc 97       	sbiw	r24, 0x3c	; 60
  d2:	54 f4       	brge	.+20     	; 0xe8 <__vector_11+0x56>
  d4:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <gSec>
  d8:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <gSec+0x1>
  dc:	01 96       	adiw	r24, 0x01	; 1
  de:	90 93 76 00 	sts	0x0076, r25	; 0x800076 <gSec+0x1>
  e2:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <gSec>
  e6:	2c c0       	rjmp	.+88     	; 0x140 <__vector_11+0xae>
		else
		{
			gSec = 0;
  e8:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <gSec+0x1>
  ec:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <gSec>
			if(gMin < 60) gMin++;
  f0:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <gMin>
  f4:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <gMin+0x1>
  f8:	cc 97       	sbiw	r24, 0x3c	; 60
  fa:	54 f4       	brge	.+20     	; 0x110 <__vector_11+0x7e>
  fc:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <gMin>
 100:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <gMin+0x1>
 104:	01 96       	adiw	r24, 0x01	; 1
 106:	90 93 78 00 	sts	0x0078, r25	; 0x800078 <gMin+0x1>
 10a:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <gMin>
 10e:	18 c0       	rjmp	.+48     	; 0x140 <__vector_11+0xae>
			else
			{
				gMin = 0;
 110:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <gMin+0x1>
 114:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <gMin>
				if(gHr < 24) gHr++;
 118:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <gHr>
 11c:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <gHr+0x1>
 120:	48 97       	sbiw	r24, 0x18	; 24
 122:	54 f4       	brge	.+20     	; 0x138 <__vector_11+0xa6>
 124:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <gHr>
 128:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <gHr+0x1>
 12c:	01 96       	adiw	r24, 0x01	; 1
 12e:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <gHr+0x1>
 132:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <gHr>
 136:	04 c0       	rjmp	.+8      	; 0x140 <__vector_11+0xae>
				else
				{
					gHr = 0;
 138:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <gHr+0x1>
 13c:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <gHr>
				}
			}
		}
	}
}
 140:	9f 91       	pop	r25
 142:	8f 91       	pop	r24
 144:	0f 90       	pop	r0
 146:	0f be       	out	0x3f, r0	; 63
 148:	0f 90       	pop	r0
 14a:	1f 90       	pop	r1
 14c:	18 95       	reti

0000014e <__vector_1>:
ISR(INT0_vect)
{
 14e:	1f 92       	push	r1
 150:	0f 92       	push	r0
 152:	0f b6       	in	r0, 0x3f	; 63
 154:	0f 92       	push	r0
 156:	11 24       	eor	r1, r1
 158:	8f 93       	push	r24
 15a:	9f 93       	push	r25
	//if (gMenu == 0) gMenu = 1:
	//else gMenu = 0;
	gMenu ^= 1;
 15c:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <__data_end>
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	98 27       	eor	r25, r24
 164:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <__data_end>
	TIMSK ^= 1;
 168:	99 b7       	in	r25, 0x39	; 57
 16a:	89 27       	eor	r24, r25
 16c:	89 bf       	out	0x39, r24	; 57
	PORTA = gMenu;
 16e:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 172:	8b bb       	out	0x1b, r24	; 27
}
 174:	9f 91       	pop	r25
 176:	8f 91       	pop	r24
 178:	0f 90       	pop	r0
 17a:	0f be       	out	0x3f, r0	; 63
 17c:	0f 90       	pop	r0
 17e:	1f 90       	pop	r1
 180:	18 95       	reti

00000182 <main>:

int main(void)
{	
	char mode = 0; // determine the menu mode 0 for Seconds, 1 for Minutes and 2 for Hours
	//Initializing Ports
	DDRA |= 1; 
 182:	d0 9a       	sbi	0x1a, 0	; 26
	PORTA &= ~1;
 184:	d8 98       	cbi	0x1b, 0	; 27
	DDRC = 0xFF; // setting Port C direction to be OUTPUT
 186:	8f ef       	ldi	r24, 0xFF	; 255
 188:	84 bb       	out	0x14, r24	; 20
	DDRB = 0xFF; // setting Port B direction to be OUTPuT
 18a:	87 bb       	out	0x17, r24	; 23
	DDRD = 0x00; // setting Port D direction to be INPUT
 18c:	11 ba       	out	0x11, r1	; 17
	PORTD = 0xFF; // Enabling PULLUP resistor for port D
 18e:	82 bb       	out	0x12, r24	; 18
	//Timer 0 initialization (prescaler CLK/1024)
	TCCR0 = 0x05;
 190:	85 e0       	ldi	r24, 0x05	; 5
 192:	83 bf       	out	0x33, r24	; 51
	TIMSK |= 1;
 194:	89 b7       	in	r24, 0x39	; 57
 196:	81 60       	ori	r24, 0x01	; 1
 198:	89 bf       	out	0x39, r24	; 57
	//External Interrupt initializing for INT0 as (FALLING edge)
	MCUCR |= 2;
 19a:	85 b7       	in	r24, 0x35	; 53
 19c:	82 60       	ori	r24, 0x02	; 2
 19e:	85 bf       	out	0x35, r24	; 53
	GICR |= 1<<6;
 1a0:	8b b7       	in	r24, 0x3b	; 59
 1a2:	80 64       	ori	r24, 0x40	; 64
 1a4:	8b bf       	out	0x3b, r24	; 59
	
	sei(); // Enable general interrupt mask
 1a6:	78 94       	sei
	PORTA = gMenu;
}

int main(void)
{	
	char mode = 0; // determine the menu mode 0 for Seconds, 1 for Minutes and 2 for Hours
 1a8:	10 e0       	ldi	r17, 0x00	; 0
    while (1) 
    {	
		// while NOT in MENU mode (MENU button not pressed) 
		if(~gMenu) 
		{
			PORTC = ~1;
 1aa:	0f 2e       	mov	r0, r31
 1ac:	fe ef       	ldi	r31, 0xFE	; 254
 1ae:	bf 2e       	mov	r11, r31
 1b0:	f0 2d       	mov	r31, r0
			PORTB = gEncoder[gSec%10];
 1b2:	2a e0       	ldi	r18, 0x0A	; 10
 1b4:	30 e0       	ldi	r19, 0x00	; 0
			_delay_us(wait);
			
			PORTC = ~2;
 1b6:	0f 2e       	mov	r0, r31
 1b8:	fd ef       	ldi	r31, 0xFD	; 253
 1ba:	cf 2e       	mov	r12, r31
 1bc:	f0 2d       	mov	r31, r0
			PORTB = gEncoder[gSec/10];
			_delay_us(wait);
			
			PORTC = ~4;
 1be:	0f 2e       	mov	r0, r31
 1c0:	fb ef       	ldi	r31, 0xFB	; 251
 1c2:	df 2e       	mov	r13, r31
 1c4:	f0 2d       	mov	r31, r0
			PORTB = gEncoder[gMin%10];
			_delay_us(wait);
			
			PORTC = ~8;
 1c6:	d7 ef       	ldi	r29, 0xF7	; 247
			PORTB = gEncoder[gMin/10];
			_delay_us(wait);
			
			PORTC = ~16;
 1c8:	cf ee       	ldi	r28, 0xEF	; 239
			PORTB = gEncoder[gHr%10];
			_delay_us(wait);
			
			PORTC = ~32;
 1ca:	4f ed       	ldi	r20, 0xDF	; 223
			 // change the mode (Seconds >> Minutes >> Hours and then repeat) 
			if (~PIND & 64)
			{
				while(~PIND & 64); 
				if(mode < 2) mode++;
				else mode = 0;
 1cc:	91 2c       	mov	r9, r1
			// change the mode (Hours >> Minutes >> Seconds and then repeat)
			if (~PIND & 32)
			{
				while(~PIND & 32);
				if(mode > 0) mode--;
				else mode = 2;
 1ce:	68 94       	set
 1d0:	88 24       	eor	r8, r8
 1d2:	81 f8       	bld	r8, 1
						if(gSec > 0) gSec--;
						else gSec = 59;
						break;
					case (1):
						if(gMin > 0) gMin--;
						else gMin = 59;
 1d4:	0f 2e       	mov	r0, r31
 1d6:	fb e3       	ldi	r31, 0x3B	; 59
 1d8:	4f 2e       	mov	r4, r31
 1da:	51 2c       	mov	r5, r1
 1dc:	f0 2d       	mov	r31, r0
						break;
					case (2):
						if(gHr > 0) gHr--;
						else gHr = 23;
 1de:	0f 2e       	mov	r0, r31
 1e0:	f7 e1       	ldi	r31, 0x17	; 23
 1e2:	ef 2e       	mov	r14, r31
 1e4:	f1 2c       	mov	r15, r1
 1e6:	f0 2d       	mov	r31, r0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e8:	77 24       	eor	r7, r7
 1ea:	73 94       	inc	r7
	sei(); // Enable general interrupt mask

    while (1) 
    {	
		// while NOT in MENU mode (MENU button not pressed) 
		if(~gMenu) 
 1ec:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
		{
			PORTC = ~1;
 1f0:	b5 ba       	out	0x15, r11	; 21
			PORTB = gEncoder[gSec%10];
 1f2:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <gSec>
 1f6:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <gSec+0x1>
 1fa:	b9 01       	movw	r22, r18
 1fc:	0e 94 b6 02 	call	0x56c	; 0x56c <__divmodhi4>
 200:	fc 01       	movw	r30, r24
 202:	ee 0f       	add	r30, r30
 204:	ff 1f       	adc	r31, r31
 206:	e0 5a       	subi	r30, 0xA0	; 160
 208:	ff 4f       	sbci	r31, 0xFF	; 255
 20a:	80 81       	ld	r24, Z
 20c:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 20e:	81 ee       	ldi	r24, 0xE1	; 225
 210:	94 e0       	ldi	r25, 0x04	; 4
 212:	01 97       	sbiw	r24, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <main+0x90>
 216:	00 c0       	rjmp	.+0      	; 0x218 <main+0x96>
 218:	00 00       	nop
			_delay_us(wait);
			
			PORTC = ~2;
 21a:	c5 ba       	out	0x15, r12	; 21
			PORTB = gEncoder[gSec/10];
 21c:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <gSec>
 220:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <gSec+0x1>
 224:	b9 01       	movw	r22, r18
 226:	0e 94 b6 02 	call	0x56c	; 0x56c <__divmodhi4>
 22a:	fb 01       	movw	r30, r22
 22c:	ee 0f       	add	r30, r30
 22e:	ff 1f       	adc	r31, r31
 230:	e0 5a       	subi	r30, 0xA0	; 160
 232:	ff 4f       	sbci	r31, 0xFF	; 255
 234:	80 81       	ld	r24, Z
 236:	88 bb       	out	0x18, r24	; 24
 238:	81 ee       	ldi	r24, 0xE1	; 225
 23a:	94 e0       	ldi	r25, 0x04	; 4
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	f1 f7       	brne	.-4      	; 0x23c <main+0xba>
 240:	00 c0       	rjmp	.+0      	; 0x242 <main+0xc0>
 242:	00 00       	nop
			_delay_us(wait);
			
			PORTC = ~4;
 244:	d5 ba       	out	0x15, r13	; 21
			PORTB = gEncoder[gMin%10];
 246:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <gMin>
 24a:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <gMin+0x1>
 24e:	b9 01       	movw	r22, r18
 250:	0e 94 b6 02 	call	0x56c	; 0x56c <__divmodhi4>
 254:	fc 01       	movw	r30, r24
 256:	ee 0f       	add	r30, r30
 258:	ff 1f       	adc	r31, r31
 25a:	e0 5a       	subi	r30, 0xA0	; 160
 25c:	ff 4f       	sbci	r31, 0xFF	; 255
 25e:	80 81       	ld	r24, Z
 260:	88 bb       	out	0x18, r24	; 24
 262:	81 ee       	ldi	r24, 0xE1	; 225
 264:	94 e0       	ldi	r25, 0x04	; 4
 266:	01 97       	sbiw	r24, 0x01	; 1
 268:	f1 f7       	brne	.-4      	; 0x266 <main+0xe4>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <main+0xea>
 26c:	00 00       	nop
			_delay_us(wait);
			
			PORTC = ~8;
 26e:	d5 bb       	out	0x15, r29	; 21
			PORTB = gEncoder[gMin/10];
 270:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <gMin>
 274:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <gMin+0x1>
 278:	b9 01       	movw	r22, r18
 27a:	0e 94 b6 02 	call	0x56c	; 0x56c <__divmodhi4>
 27e:	fb 01       	movw	r30, r22
 280:	ee 0f       	add	r30, r30
 282:	ff 1f       	adc	r31, r31
 284:	e0 5a       	subi	r30, 0xA0	; 160
 286:	ff 4f       	sbci	r31, 0xFF	; 255
 288:	80 81       	ld	r24, Z
 28a:	88 bb       	out	0x18, r24	; 24
 28c:	81 ee       	ldi	r24, 0xE1	; 225
 28e:	94 e0       	ldi	r25, 0x04	; 4
 290:	01 97       	sbiw	r24, 0x01	; 1
 292:	f1 f7       	brne	.-4      	; 0x290 <main+0x10e>
 294:	00 c0       	rjmp	.+0      	; 0x296 <main+0x114>
 296:	00 00       	nop
			_delay_us(wait);
			
			PORTC = ~16;
 298:	c5 bb       	out	0x15, r28	; 21
			PORTB = gEncoder[gHr%10];
 29a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <gHr>
 29e:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <gHr+0x1>
 2a2:	b9 01       	movw	r22, r18
 2a4:	0e 94 b6 02 	call	0x56c	; 0x56c <__divmodhi4>
 2a8:	fc 01       	movw	r30, r24
 2aa:	ee 0f       	add	r30, r30
 2ac:	ff 1f       	adc	r31, r31
 2ae:	e0 5a       	subi	r30, 0xA0	; 160
 2b0:	ff 4f       	sbci	r31, 0xFF	; 255
 2b2:	80 81       	ld	r24, Z
 2b4:	88 bb       	out	0x18, r24	; 24
 2b6:	81 ee       	ldi	r24, 0xE1	; 225
 2b8:	94 e0       	ldi	r25, 0x04	; 4
 2ba:	01 97       	sbiw	r24, 0x01	; 1
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <main+0x138>
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <main+0x13e>
 2c0:	00 00       	nop
			_delay_us(wait);
			
			PORTC = ~32;
 2c2:	45 bb       	out	0x15, r20	; 21
			PORTB = gEncoder[gHr/10];
 2c4:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <gHr>
 2c8:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <gHr+0x1>
 2cc:	b9 01       	movw	r22, r18
 2ce:	0e 94 b6 02 	call	0x56c	; 0x56c <__divmodhi4>
 2d2:	fb 01       	movw	r30, r22
 2d4:	ee 0f       	add	r30, r30
 2d6:	ff 1f       	adc	r31, r31
 2d8:	e0 5a       	subi	r30, 0xA0	; 160
 2da:	ff 4f       	sbci	r31, 0xFF	; 255
 2dc:	80 81       	ld	r24, Z
 2de:	88 bb       	out	0x18, r24	; 24
 2e0:	81 ee       	ldi	r24, 0xE1	; 225
 2e2:	94 e0       	ldi	r25, 0x04	; 4
 2e4:	01 97       	sbiw	r24, 0x01	; 1
 2e6:	f1 f7       	brne	.-4      	; 0x2e4 <main+0x162>
 2e8:	00 c0       	rjmp	.+0      	; 0x2ea <main+0x168>
 2ea:	00 00       	nop
			_delay_us(wait);
		}
		
		// While in MENU mode (MENU button pressed)
		if(gMenu)
 2ec:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 2f0:	88 23       	and	r24, r24
 2f2:	09 f4       	brne	.+2      	; 0x2f6 <main+0x174>
 2f4:	7b cf       	rjmp	.-266    	; 0x1ec <main+0x6a>
		{
			 // if LEFT button pressed (single press) 
			 // change the mode (Seconds >> Minutes >> Hours and then repeat) 
			if (~PIND & 64)
 2f6:	86 99       	sbic	0x10, 6	; 16
 2f8:	07 c0       	rjmp	.+14     	; 0x308 <main+0x186>
			{
				while(~PIND & 64); 
 2fa:	86 9b       	sbis	0x10, 6	; 16
 2fc:	fe cf       	rjmp	.-4      	; 0x2fa <main+0x178>
				if(mode < 2) mode++;
 2fe:	12 30       	cpi	r17, 0x02	; 2
 300:	10 f4       	brcc	.+4      	; 0x306 <main+0x184>
 302:	1f 5f       	subi	r17, 0xFF	; 255
 304:	01 c0       	rjmp	.+2      	; 0x308 <main+0x186>
				else mode = 0;
 306:	19 2d       	mov	r17, r9
				
			}
			
			// if RIGHT button pressed (single press)
			// change the mode (Hours >> Minutes >> Seconds and then repeat)
			if (~PIND & 32)
 308:	85 99       	sbic	0x10, 5	; 16
 30a:	07 c0       	rjmp	.+14     	; 0x31a <main+0x198>
			{
				while(~PIND & 32);
 30c:	85 9b       	sbis	0x10, 5	; 16
 30e:	fe cf       	rjmp	.-4      	; 0x30c <main+0x18a>
				if(mode > 0) mode--;
 310:	11 23       	and	r17, r17
 312:	11 f0       	breq	.+4      	; 0x318 <main+0x196>
 314:	11 50       	subi	r17, 0x01	; 1
 316:	01 c0       	rjmp	.+2      	; 0x31a <main+0x198>
				else mode = 2;
 318:	18 2d       	mov	r17, r8
				
			}
			
			// if UP button pressed (single press)
			// increment the current mode by one
			if(~PIND & 8)
 31a:	83 99       	sbic	0x10, 3	; 16
 31c:	47 c0       	rjmp	.+142    	; 0x3ac <main+0x22a>
			{
				while(~PIND & 8);
 31e:	83 9b       	sbis	0x10, 3	; 16
 320:	fe cf       	rjmp	.-4      	; 0x31e <main+0x19c>
				switch(mode)
 322:	11 30       	cpi	r17, 0x01	; 1
 324:	c9 f0       	breq	.+50     	; 0x358 <main+0x1d6>
 326:	18 f0       	brcs	.+6      	; 0x32e <main+0x1ac>
 328:	12 30       	cpi	r17, 0x02	; 2
 32a:	59 f1       	breq	.+86     	; 0x382 <main+0x200>
 32c:	3f c0       	rjmp	.+126    	; 0x3ac <main+0x22a>
				{
					case (0):
						if(gSec < 59) gSec++;
 32e:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <gSec>
 332:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <gSec+0x1>
 336:	cb 97       	sbiw	r24, 0x3b	; 59
 338:	54 f4       	brge	.+20     	; 0x34e <main+0x1cc>
 33a:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <gSec>
 33e:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <gSec+0x1>
 342:	01 96       	adiw	r24, 0x01	; 1
 344:	90 93 76 00 	sts	0x0076, r25	; 0x800076 <gSec+0x1>
 348:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <gSec>
 34c:	0c c1       	rjmp	.+536    	; 0x566 <__FUSE_REGION_LENGTH__+0x166>
						else gSec = 0;
 34e:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <gSec+0x1>
 352:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <gSec>
 356:	07 c1       	rjmp	.+526    	; 0x566 <__FUSE_REGION_LENGTH__+0x166>
						break;
					case (1):
						if(gMin < 59) gMin++;
 358:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <gMin>
 35c:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <gMin+0x1>
 360:	cb 97       	sbiw	r24, 0x3b	; 59
 362:	54 f4       	brge	.+20     	; 0x378 <main+0x1f6>
 364:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <gMin>
 368:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <gMin+0x1>
 36c:	01 96       	adiw	r24, 0x01	; 1
 36e:	90 93 78 00 	sts	0x0078, r25	; 0x800078 <gMin+0x1>
 372:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <gMin>
 376:	f1 c0       	rjmp	.+482    	; 0x55a <__FUSE_REGION_LENGTH__+0x15a>
						else gMin = 0;
 378:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <gMin+0x1>
 37c:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <gMin>
 380:	ec c0       	rjmp	.+472    	; 0x55a <__FUSE_REGION_LENGTH__+0x15a>
						break;
					case (2):
						if(gHr < 23) gHr++;
 382:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <gHr>
 386:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <gHr+0x1>
 38a:	47 97       	sbiw	r24, 0x17	; 23
 38c:	54 f4       	brge	.+20     	; 0x3a2 <main+0x220>
 38e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <gHr>
 392:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <gHr+0x1>
 396:	01 96       	adiw	r24, 0x01	; 1
 398:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <gHr+0x1>
 39c:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <gHr>
 3a0:	df c0       	rjmp	.+446    	; 0x560 <__FUSE_REGION_LENGTH__+0x160>
						else gHr = 0;
 3a2:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <gHr+0x1>
 3a6:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <gHr>
 3aa:	da c0       	rjmp	.+436    	; 0x560 <__FUSE_REGION_LENGTH__+0x160>
				
			}
			
			// if DOWN button pressed (single press)
			// decrement the current mode by one
			if(~PIND & 16)
 3ac:	84 99       	sbic	0x10, 4	; 16
 3ae:	4a c0       	rjmp	.+148    	; 0x444 <__FUSE_REGION_LENGTH__+0x44>
			{
				while (~PIND & 16);
 3b0:	84 9b       	sbis	0x10, 4	; 16
 3b2:	fe cf       	rjmp	.-4      	; 0x3b0 <main+0x22e>
				switch(mode)
 3b4:	11 30       	cpi	r17, 0x01	; 1
 3b6:	d1 f0       	breq	.+52     	; 0x3ec <main+0x26a>
 3b8:	18 f0       	brcs	.+6      	; 0x3c0 <main+0x23e>
 3ba:	12 30       	cpi	r17, 0x02	; 2
 3bc:	69 f1       	breq	.+90     	; 0x418 <__FUSE_REGION_LENGTH__+0x18>
 3be:	42 c0       	rjmp	.+132    	; 0x444 <__FUSE_REGION_LENGTH__+0x44>
				{
					case (0):
						if(gSec > 0) gSec--;
 3c0:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <gSec>
 3c4:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <gSec+0x1>
 3c8:	18 16       	cp	r1, r24
 3ca:	19 06       	cpc	r1, r25
 3cc:	54 f4       	brge	.+20     	; 0x3e2 <main+0x260>
 3ce:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <gSec>
 3d2:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <gSec+0x1>
 3d6:	01 97       	sbiw	r24, 0x01	; 1
 3d8:	90 93 76 00 	sts	0x0076, r25	; 0x800076 <gSec+0x1>
 3dc:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <gSec>
 3e0:	38 c0       	rjmp	.+112    	; 0x452 <__FUSE_REGION_LENGTH__+0x52>
						else gSec = 59;
 3e2:	50 92 76 00 	sts	0x0076, r5	; 0x800076 <gSec+0x1>
 3e6:	40 92 75 00 	sts	0x0075, r4	; 0x800075 <gSec>
 3ea:	33 c0       	rjmp	.+102    	; 0x452 <__FUSE_REGION_LENGTH__+0x52>
						break;
					case (1):
						if(gMin > 0) gMin--;
 3ec:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <gMin>
 3f0:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <gMin+0x1>
 3f4:	18 16       	cp	r1, r24
 3f6:	19 06       	cpc	r1, r25
 3f8:	54 f4       	brge	.+20     	; 0x40e <__FUSE_REGION_LENGTH__+0xe>
 3fa:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <gMin>
 3fe:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <gMin+0x1>
 402:	01 97       	sbiw	r24, 0x01	; 1
 404:	90 93 78 00 	sts	0x0078, r25	; 0x800078 <gMin+0x1>
 408:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <gMin>
 40c:	4e c0       	rjmp	.+156    	; 0x4aa <__FUSE_REGION_LENGTH__+0xaa>
						else gMin = 59;
 40e:	50 92 78 00 	sts	0x0078, r5	; 0x800078 <gMin+0x1>
 412:	40 92 77 00 	sts	0x0077, r4	; 0x800077 <gMin>
 416:	49 c0       	rjmp	.+146    	; 0x4aa <__FUSE_REGION_LENGTH__+0xaa>
						break;
					case (2):
						if(gHr > 0) gHr--;
 418:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <gHr>
 41c:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <gHr+0x1>
 420:	18 16       	cp	r1, r24
 422:	19 06       	cpc	r1, r25
 424:	54 f4       	brge	.+20     	; 0x43a <__FUSE_REGION_LENGTH__+0x3a>
 426:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <gHr>
 42a:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <gHr+0x1>
 42e:	01 97       	sbiw	r24, 0x01	; 1
 430:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <gHr+0x1>
 434:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <gHr>
 438:	64 c0       	rjmp	.+200    	; 0x502 <__FUSE_REGION_LENGTH__+0x102>
						else gHr = 23;
 43a:	f0 92 7a 00 	sts	0x007A, r15	; 0x80007a <gHr+0x1>
 43e:	e0 92 79 00 	sts	0x0079, r14	; 0x800079 <gHr>
 442:	5f c0       	rjmp	.+190    	; 0x502 <__FUSE_REGION_LENGTH__+0x102>
						break;
				}
			}
			// flash current mode
			switch(mode)
 444:	11 30       	cpi	r17, 0x01	; 1
 446:	89 f1       	breq	.+98     	; 0x4aa <__FUSE_REGION_LENGTH__+0xaa>
 448:	20 f0       	brcs	.+8      	; 0x452 <__FUSE_REGION_LENGTH__+0x52>
 44a:	12 30       	cpi	r17, 0x02	; 2
 44c:	09 f0       	breq	.+2      	; 0x450 <__FUSE_REGION_LENGTH__+0x50>
 44e:	ce ce       	rjmp	.-612    	; 0x1ec <main+0x6a>
 450:	58 c0       	rjmp	.+176    	; 0x502 <__FUSE_REGION_LENGTH__+0x102>
			{
				// 200 * wait = delay 500 milliseconds 
				case (0):
					PORTC = ~1;
 452:	b5 ba       	out	0x15, r11	; 21
					PORTB = gEncoder[gSec%10];
 454:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <gSec>
 458:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <gSec+0x1>
 45c:	b9 01       	movw	r22, r18
 45e:	0e 94 b6 02 	call	0x56c	; 0x56c <__divmodhi4>
 462:	fc 01       	movw	r30, r24
 464:	ee 0f       	add	r30, r30
 466:	ff 1f       	adc	r31, r31
 468:	e0 5a       	subi	r30, 0xA0	; 160
 46a:	ff 4f       	sbci	r31, 0xFF	; 255
 46c:	80 81       	ld	r24, Z
 46e:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 470:	83 ed       	ldi	r24, 0xD3	; 211
 472:	90 e3       	ldi	r25, 0x30	; 48
 474:	01 97       	sbiw	r24, 0x01	; 1
 476:	f1 f7       	brne	.-4      	; 0x474 <__FUSE_REGION_LENGTH__+0x74>
 478:	00 c0       	rjmp	.+0      	; 0x47a <__FUSE_REGION_LENGTH__+0x7a>
 47a:	00 00       	nop
					_delay_ms(menu_wait); 
					
					PORTC = ~2;
 47c:	c5 ba       	out	0x15, r12	; 21
					PORTB = gEncoder[gSec/10];
 47e:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <gSec>
 482:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <gSec+0x1>
 486:	b9 01       	movw	r22, r18
 488:	0e 94 b6 02 	call	0x56c	; 0x56c <__divmodhi4>
 48c:	fb 01       	movw	r30, r22
 48e:	ee 0f       	add	r30, r30
 490:	ff 1f       	adc	r31, r31
 492:	e0 5a       	subi	r30, 0xA0	; 160
 494:	ff 4f       	sbci	r31, 0xFF	; 255
 496:	80 81       	ld	r24, Z
 498:	88 bb       	out	0x18, r24	; 24
 49a:	83 ed       	ldi	r24, 0xD3	; 211
 49c:	90 e3       	ldi	r25, 0x30	; 48
 49e:	01 97       	sbiw	r24, 0x01	; 1
 4a0:	f1 f7       	brne	.-4      	; 0x49e <__FUSE_REGION_LENGTH__+0x9e>
 4a2:	00 c0       	rjmp	.+0      	; 0x4a4 <__FUSE_REGION_LENGTH__+0xa4>
 4a4:	00 00       	nop
 4a6:	19 2d       	mov	r17, r9
 4a8:	a1 ce       	rjmp	.-702    	; 0x1ec <main+0x6a>
					_delay_ms(menu_wait);
					break;
				case (1):
					PORTC = ~4;
 4aa:	d5 ba       	out	0x15, r13	; 21
					PORTB = gEncoder[gMin%10];
 4ac:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <gMin>
 4b0:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <gMin+0x1>
 4b4:	b9 01       	movw	r22, r18
 4b6:	0e 94 b6 02 	call	0x56c	; 0x56c <__divmodhi4>
 4ba:	fc 01       	movw	r30, r24
 4bc:	ee 0f       	add	r30, r30
 4be:	ff 1f       	adc	r31, r31
 4c0:	e0 5a       	subi	r30, 0xA0	; 160
 4c2:	ff 4f       	sbci	r31, 0xFF	; 255
 4c4:	80 81       	ld	r24, Z
 4c6:	88 bb       	out	0x18, r24	; 24
 4c8:	83 ed       	ldi	r24, 0xD3	; 211
 4ca:	90 e3       	ldi	r25, 0x30	; 48
 4cc:	01 97       	sbiw	r24, 0x01	; 1
 4ce:	f1 f7       	brne	.-4      	; 0x4cc <__FUSE_REGION_LENGTH__+0xcc>
 4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <__FUSE_REGION_LENGTH__+0xd2>
 4d2:	00 00       	nop
					_delay_ms(menu_wait);
					
					PORTC = ~8;
 4d4:	d5 bb       	out	0x15, r29	; 21
					PORTB = gEncoder[gMin/10];
 4d6:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <gMin>
 4da:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <gMin+0x1>
 4de:	b9 01       	movw	r22, r18
 4e0:	0e 94 b6 02 	call	0x56c	; 0x56c <__divmodhi4>
 4e4:	fb 01       	movw	r30, r22
 4e6:	ee 0f       	add	r30, r30
 4e8:	ff 1f       	adc	r31, r31
 4ea:	e0 5a       	subi	r30, 0xA0	; 160
 4ec:	ff 4f       	sbci	r31, 0xFF	; 255
 4ee:	80 81       	ld	r24, Z
 4f0:	88 bb       	out	0x18, r24	; 24
 4f2:	83 ed       	ldi	r24, 0xD3	; 211
 4f4:	90 e3       	ldi	r25, 0x30	; 48
 4f6:	01 97       	sbiw	r24, 0x01	; 1
 4f8:	f1 f7       	brne	.-4      	; 0x4f6 <__FUSE_REGION_LENGTH__+0xf6>
 4fa:	00 c0       	rjmp	.+0      	; 0x4fc <__FUSE_REGION_LENGTH__+0xfc>
 4fc:	00 00       	nop
 4fe:	17 2d       	mov	r17, r7
 500:	75 ce       	rjmp	.-790    	; 0x1ec <main+0x6a>
					_delay_ms(menu_wait);
					break;
				case (2):
					PORTC = ~16;
 502:	c5 bb       	out	0x15, r28	; 21
					PORTB = gEncoder[gHr%10];
 504:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <gHr>
 508:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <gHr+0x1>
 50c:	b9 01       	movw	r22, r18
 50e:	0e 94 b6 02 	call	0x56c	; 0x56c <__divmodhi4>
 512:	fc 01       	movw	r30, r24
 514:	ee 0f       	add	r30, r30
 516:	ff 1f       	adc	r31, r31
 518:	e0 5a       	subi	r30, 0xA0	; 160
 51a:	ff 4f       	sbci	r31, 0xFF	; 255
 51c:	80 81       	ld	r24, Z
 51e:	88 bb       	out	0x18, r24	; 24
 520:	83 ed       	ldi	r24, 0xD3	; 211
 522:	90 e3       	ldi	r25, 0x30	; 48
 524:	01 97       	sbiw	r24, 0x01	; 1
 526:	f1 f7       	brne	.-4      	; 0x524 <__FUSE_REGION_LENGTH__+0x124>
 528:	00 c0       	rjmp	.+0      	; 0x52a <__FUSE_REGION_LENGTH__+0x12a>
 52a:	00 00       	nop
					_delay_ms(menu_wait);
					
					PORTC = ~32;
 52c:	45 bb       	out	0x15, r20	; 21
					PORTB = gEncoder[gHr/10];
 52e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <gHr>
 532:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <gHr+0x1>
 536:	b9 01       	movw	r22, r18
 538:	0e 94 b6 02 	call	0x56c	; 0x56c <__divmodhi4>
 53c:	fb 01       	movw	r30, r22
 53e:	ee 0f       	add	r30, r30
 540:	ff 1f       	adc	r31, r31
 542:	e0 5a       	subi	r30, 0xA0	; 160
 544:	ff 4f       	sbci	r31, 0xFF	; 255
 546:	80 81       	ld	r24, Z
 548:	88 bb       	out	0x18, r24	; 24
 54a:	83 ed       	ldi	r24, 0xD3	; 211
 54c:	90 e3       	ldi	r25, 0x30	; 48
 54e:	01 97       	sbiw	r24, 0x01	; 1
 550:	f1 f7       	brne	.-4      	; 0x54e <__FUSE_REGION_LENGTH__+0x14e>
 552:	00 c0       	rjmp	.+0      	; 0x554 <__FUSE_REGION_LENGTH__+0x154>
 554:	00 00       	nop
 556:	18 2d       	mov	r17, r8
 558:	49 ce       	rjmp	.-878    	; 0x1ec <main+0x6a>
				
			}
			
			// if DOWN button pressed (single press)
			// decrement the current mode by one
			if(~PIND & 16)
 55a:	84 9b       	sbis	0x10, 4	; 16
 55c:	29 cf       	rjmp	.-430    	; 0x3b0 <main+0x22e>
 55e:	a5 cf       	rjmp	.-182    	; 0x4aa <__FUSE_REGION_LENGTH__+0xaa>
 560:	84 99       	sbic	0x10, 4	; 16
 562:	cf cf       	rjmp	.-98     	; 0x502 <__FUSE_REGION_LENGTH__+0x102>
 564:	25 cf       	rjmp	.-438    	; 0x3b0 <main+0x22e>
 566:	84 9b       	sbis	0x10, 4	; 16
 568:	23 cf       	rjmp	.-442    	; 0x3b0 <main+0x22e>
 56a:	73 cf       	rjmp	.-282    	; 0x452 <__FUSE_REGION_LENGTH__+0x52>

0000056c <__divmodhi4>:
 56c:	97 fb       	bst	r25, 7
 56e:	07 2e       	mov	r0, r23
 570:	16 f4       	brtc	.+4      	; 0x576 <__divmodhi4+0xa>
 572:	00 94       	com	r0
 574:	07 d0       	rcall	.+14     	; 0x584 <__divmodhi4_neg1>
 576:	77 fd       	sbrc	r23, 7
 578:	09 d0       	rcall	.+18     	; 0x58c <__divmodhi4_neg2>
 57a:	0e 94 ca 02 	call	0x594	; 0x594 <__udivmodhi4>
 57e:	07 fc       	sbrc	r0, 7
 580:	05 d0       	rcall	.+10     	; 0x58c <__divmodhi4_neg2>
 582:	3e f4       	brtc	.+14     	; 0x592 <__divmodhi4_exit>

00000584 <__divmodhi4_neg1>:
 584:	90 95       	com	r25
 586:	81 95       	neg	r24
 588:	9f 4f       	sbci	r25, 0xFF	; 255
 58a:	08 95       	ret

0000058c <__divmodhi4_neg2>:
 58c:	70 95       	com	r23
 58e:	61 95       	neg	r22
 590:	7f 4f       	sbci	r23, 0xFF	; 255

00000592 <__divmodhi4_exit>:
 592:	08 95       	ret

00000594 <__udivmodhi4>:
 594:	aa 1b       	sub	r26, r26
 596:	bb 1b       	sub	r27, r27
 598:	51 e1       	ldi	r21, 0x11	; 17
 59a:	07 c0       	rjmp	.+14     	; 0x5aa <__udivmodhi4_ep>

0000059c <__udivmodhi4_loop>:
 59c:	aa 1f       	adc	r26, r26
 59e:	bb 1f       	adc	r27, r27
 5a0:	a6 17       	cp	r26, r22
 5a2:	b7 07       	cpc	r27, r23
 5a4:	10 f0       	brcs	.+4      	; 0x5aa <__udivmodhi4_ep>
 5a6:	a6 1b       	sub	r26, r22
 5a8:	b7 0b       	sbc	r27, r23

000005aa <__udivmodhi4_ep>:
 5aa:	88 1f       	adc	r24, r24
 5ac:	99 1f       	adc	r25, r25
 5ae:	5a 95       	dec	r21
 5b0:	a9 f7       	brne	.-22     	; 0x59c <__udivmodhi4_loop>
 5b2:	80 95       	com	r24
 5b4:	90 95       	com	r25
 5b6:	bc 01       	movw	r22, r24
 5b8:	cd 01       	movw	r24, r26
 5ba:	08 95       	ret

000005bc <_exit>:
 5bc:	f8 94       	cli

000005be <__stop_program>:
 5be:	ff cf       	rjmp	.-2      	; 0x5be <__stop_program>
