
Digital_Clock_Ziad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000162  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000162  000001f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  000001f6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001f6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000226  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000272  00000000  00000000  0000026e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000181  00000000  00000000  000004e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000224  00000000  00000000  00000661  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00000888  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001c7  00000000  00000000  000008f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  00000ab7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00000aff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#define F_CPU 1000000UL
#endif

extern u8 h1,h2,m1,m2,s1,s2;
void mydelay(unsigned long time)
{
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
	volatile unsigned long i=1000;
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
	
		for(;i<-1000;i--)
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
		{
			
		}
	
}
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a6 36       	cpi	r26, 0x66	; 102
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 af 00 	jmp	0x15e	; 0x15e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
#include "my_header.h"
#include "util/delay.h"
u8 h1,h2,m1,m2,s1,s2;
int main(void)
{
	DDRA=0xFF;
  7c:	8f ef       	ldi	r24, 0xFF	; 255
  7e:	8a bb       	out	0x1a, r24	; 26
	DDRB=0xFF;
  80:	87 bb       	out	0x17, r24	; 23
	DDRC=0xFF;
  82:	84 bb       	out	0x14, r24	; 20
	DDRD=0x00;
  84:	11 ba       	out	0x11, r1	; 17
	
    while(1)
    {
beginning : for(h1=0;h1<=2;h1++)
  86:	10 92 60 00 	sts	0x0060, r1
			for(h2=0;h2<=23;h2++)
  8a:	10 92 63 00 	sts	0x0063, r1
		
			for(m1=0;m1<=5;m1++)
  8e:	10 92 65 00 	sts	0x0065, r1
			for(m2=0;m2<=9;m2++)
  92:	10 92 61 00 	sts	0x0061, r1
		
			for(s1=0;s1<=5;s1++)
  96:	10 92 62 00 	sts	0x0062, r1
			for(s2=0;s2<=9;s2++)		 
  9a:	10 92 64 00 	sts	0x0064, r1
  9e:	20 e0       	ldi	r18, 0x00	; 0
			{
				//clock_edit();
				if((h1==2) && (h2==4))
  a0:	90 91 60 00 	lds	r25, 0x0060
  a4:	92 30       	cpi	r25, 0x02	; 2
  a6:	21 f4       	brne	.+8      	; 0xb0 <main+0x34>
  a8:	80 91 63 00 	lds	r24, 0x0063
  ac:	84 30       	cpi	r24, 0x04	; 4
  ae:	59 f3       	breq	.-42     	; 0x86 <main+0xa>
				{
					goto beginning;
				}
				PORTA=(s2<<0)|(s1<<4);
  b0:	80 91 62 00 	lds	r24, 0x0062
  b4:	30 e1       	ldi	r19, 0x10	; 16
  b6:	83 9f       	mul	r24, r19
  b8:	c0 01       	movw	r24, r0
  ba:	11 24       	eor	r1, r1
  bc:	82 2b       	or	r24, r18
  be:	8b bb       	out	0x1b, r24	; 27
				PORTB=(m2<<0)|(m1<<4);
  c0:	80 91 65 00 	lds	r24, 0x0065
  c4:	20 e1       	ldi	r18, 0x10	; 16
  c6:	82 9f       	mul	r24, r18
  c8:	c0 01       	movw	r24, r0
  ca:	11 24       	eor	r1, r1
  cc:	90 91 61 00 	lds	r25, 0x0061
  d0:	89 2b       	or	r24, r25
  d2:	88 bb       	out	0x18, r24	; 24
				PORTC=(h2<<0)|(h1<<4);
  d4:	80 91 60 00 	lds	r24, 0x0060
  d8:	30 e1       	ldi	r19, 0x10	; 16
  da:	83 9f       	mul	r24, r19
  dc:	c0 01       	movw	r24, r0
  de:	11 24       	eor	r1, r1
  e0:	90 91 63 00 	lds	r25, 0x0063
  e4:	89 2b       	or	r24, r25
  e6:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e8:	8f e3       	ldi	r24, 0x3F	; 63
  ea:	9d e0       	ldi	r25, 0x0D	; 13
  ec:	23 e0       	ldi	r18, 0x03	; 3
  ee:	81 50       	subi	r24, 0x01	; 1
  f0:	90 40       	sbci	r25, 0x00	; 0
  f2:	20 40       	sbci	r18, 0x00	; 0
  f4:	e1 f7       	brne	.-8      	; 0xee <main+0x72>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <main+0x7c>
  f8:	00 00       	nop
		
			for(m1=0;m1<=5;m1++)
			for(m2=0;m2<=9;m2++)
		
			for(s1=0;s1<=5;s1++)
			for(s2=0;s2<=9;s2++)		 
  fa:	80 91 64 00 	lds	r24, 0x0064
  fe:	8f 5f       	subi	r24, 0xFF	; 255
 100:	80 93 64 00 	sts	0x0064, r24
 104:	8a 30       	cpi	r24, 0x0A	; 10
 106:	10 f4       	brcc	.+4      	; 0x10c <main+0x90>
 108:	28 2f       	mov	r18, r24
 10a:	ca cf       	rjmp	.-108    	; 0xa0 <main+0x24>
			for(h2=0;h2<=23;h2++)
		
			for(m1=0;m1<=5;m1++)
			for(m2=0;m2<=9;m2++)
		
			for(s1=0;s1<=5;s1++)
 10c:	80 91 62 00 	lds	r24, 0x0062
 110:	8f 5f       	subi	r24, 0xFF	; 255
 112:	80 93 62 00 	sts	0x0062, r24
 116:	86 30       	cpi	r24, 0x06	; 6
 118:	08 f4       	brcc	.+2      	; 0x11c <main+0xa0>
 11a:	bf cf       	rjmp	.-130    	; 0x9a <main+0x1e>
    {
beginning : for(h1=0;h1<=2;h1++)
			for(h2=0;h2<=23;h2++)
		
			for(m1=0;m1<=5;m1++)
			for(m2=0;m2<=9;m2++)
 11c:	80 91 61 00 	lds	r24, 0x0061
 120:	8f 5f       	subi	r24, 0xFF	; 255
 122:	80 93 61 00 	sts	0x0061, r24
 126:	8a 30       	cpi	r24, 0x0A	; 10
 128:	08 f4       	brcc	.+2      	; 0x12c <main+0xb0>
 12a:	b5 cf       	rjmp	.-150    	; 0x96 <main+0x1a>
    while(1)
    {
beginning : for(h1=0;h1<=2;h1++)
			for(h2=0;h2<=23;h2++)
		
			for(m1=0;m1<=5;m1++)
 12c:	80 91 65 00 	lds	r24, 0x0065
 130:	8f 5f       	subi	r24, 0xFF	; 255
 132:	80 93 65 00 	sts	0x0065, r24
 136:	86 30       	cpi	r24, 0x06	; 6
 138:	08 f4       	brcc	.+2      	; 0x13c <main+0xc0>
 13a:	ab cf       	rjmp	.-170    	; 0x92 <main+0x16>
	DDRD=0x00;
	
    while(1)
    {
beginning : for(h1=0;h1<=2;h1++)
			for(h2=0;h2<=23;h2++)
 13c:	80 91 63 00 	lds	r24, 0x0063
 140:	8f 5f       	subi	r24, 0xFF	; 255
 142:	80 93 63 00 	sts	0x0063, r24
 146:	88 31       	cpi	r24, 0x18	; 24
 148:	08 f4       	brcc	.+2      	; 0x14c <main+0xd0>
 14a:	a1 cf       	rjmp	.-190    	; 0x8e <main+0x12>
	DDRC=0xFF;
	DDRD=0x00;
	
    while(1)
    {
beginning : for(h1=0;h1<=2;h1++)
 14c:	80 91 60 00 	lds	r24, 0x0060
 150:	8f 5f       	subi	r24, 0xFF	; 255
 152:	80 93 60 00 	sts	0x0060, r24
 156:	83 30       	cpi	r24, 0x03	; 3
 158:	08 f4       	brcc	.+2      	; 0x15c <main+0xe0>
 15a:	97 cf       	rjmp	.-210    	; 0x8a <main+0xe>
 15c:	94 cf       	rjmp	.-216    	; 0x86 <main+0xa>

0000015e <_exit>:
 15e:	f8 94       	cli

00000160 <__stop_program>:
 160:	ff cf       	rjmp	.-2      	; 0x160 <__stop_program>
