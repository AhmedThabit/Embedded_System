
binary_counter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ec  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000140  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000170  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000128  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000d1  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000190  00000000  00000000  000003c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000558  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000018b  00000000  00000000  0000057c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000088  00000000  00000000  00000707  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000078f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 74 00 	jmp	0xe8	; 0xe8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
int main(void)
{	
	int inc=1;
	int  Num = 0;
		
	DDRD = 0xE0;
  6c:	80 ee       	ldi	r24, 0xE0	; 224
  6e:	81 bb       	out	0x11, r24	; 17
	DDRC = 0xF4;
  70:	84 ef       	ldi	r24, 0xF4	; 244
  72:	84 bb       	out	0x14, r24	; 20


int main(void)
{	
	int inc=1;
	int  Num = 0;
  74:	80 e0       	ldi	r24, 0x00	; 0
  76:	90 e0       	ldi	r25, 0x00	; 0
#include <util/delay.h>


int main(void)
{	
	int inc=1;
  78:	21 e0       	ldi	r18, 0x01	; 1
  7a:	30 e0       	ldi	r19, 0x00	; 0
    while (1) 
    {
		
		if(PIND & 1){
			while(PIND & 1);
			inc = 1;
  7c:	e1 e0       	ldi	r30, 0x01	; 1
  7e:	70 e0       	ldi	r23, 0x00	; 0
		}
		if(PIND & 2){
			while(PIND & 2);
			inc = -1;
  80:	6f ef       	ldi	r22, 0xFF	; 255
  82:	5f ef       	ldi	r21, 0xFF	; 255
		}
		
		Num += inc;
		if(Num == 8) Num = 0;
  84:	a0 e0       	ldi	r26, 0x00	; 0
  86:	f0 e0       	ldi	r31, 0x00	; 0
		else if(Num == -1) Num =7;
  88:	c7 e0       	ldi	r28, 0x07	; 7
  8a:	b0 e0       	ldi	r27, 0x00	; 0
	DDRC = 0xF4;
	 
    while (1) 
    {
		
		if(PIND & 1){
  8c:	80 9b       	sbis	0x10, 0	; 16
  8e:	04 c0       	rjmp	.+8      	; 0x98 <main+0x2c>
			while(PIND & 1);
  90:	80 99       	sbic	0x10, 0	; 16
  92:	fe cf       	rjmp	.-4      	; 0x90 <main+0x24>
			inc = 1;
  94:	2e 2f       	mov	r18, r30
  96:	37 2f       	mov	r19, r23
		}
		if(PIND & 2){
  98:	81 9b       	sbis	0x10, 1	; 16
  9a:	04 c0       	rjmp	.+8      	; 0xa4 <main+0x38>
			while(PIND & 2);
  9c:	81 99       	sbic	0x10, 1	; 16
  9e:	fe cf       	rjmp	.-4      	; 0x9c <main+0x30>
			inc = -1;
  a0:	26 2f       	mov	r18, r22
  a2:	35 2f       	mov	r19, r21
		}
		
		Num += inc;
  a4:	82 0f       	add	r24, r18
  a6:	93 1f       	adc	r25, r19
		if(Num == 8) Num = 0;
  a8:	88 30       	cpi	r24, 0x08	; 8
  aa:	91 05       	cpc	r25, r1
  ac:	39 f0       	breq	.+14     	; 0xbc <main+0x50>
		else if(Num == -1) Num =7;
  ae:	8f 3f       	cpi	r24, 0xFF	; 255
  b0:	1f ef       	ldi	r17, 0xFF	; 255
  b2:	91 07       	cpc	r25, r17
  b4:	29 f4       	brne	.+10     	; 0xc0 <main+0x54>
  b6:	8c 2f       	mov	r24, r28
  b8:	9b 2f       	mov	r25, r27
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <main+0x54>
			while(PIND & 2);
			inc = -1;
		}
		
		Num += inc;
		if(Num == 8) Num = 0;
  bc:	8a 2f       	mov	r24, r26
  be:	9f 2f       	mov	r25, r31
		else if(Num == -1) Num =7;
		PORTC = Num << 4;
  c0:	48 2f       	mov	r20, r24
  c2:	42 95       	swap	r20
  c4:	40 7f       	andi	r20, 0xF0	; 240
  c6:	45 bb       	out	0x15, r20	; 21
		PORTC |= 1 << 2;
  c8:	aa 9a       	sbi	0x15, 2	; 21
		PORTD = Num << 5; 
  ca:	48 2f       	mov	r20, r24
  cc:	42 95       	swap	r20
  ce:	44 0f       	add	r20, r20
  d0:	40 7e       	andi	r20, 0xE0	; 224
  d2:	42 bb       	out	0x12, r20	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d4:	4f e3       	ldi	r20, 0x3F	; 63
  d6:	d2 e4       	ldi	r29, 0x42	; 66
  d8:	1f e0       	ldi	r17, 0x0F	; 15
  da:	41 50       	subi	r20, 0x01	; 1
  dc:	d0 40       	sbci	r29, 0x00	; 0
  de:	10 40       	sbci	r17, 0x00	; 0
  e0:	e1 f7       	brne	.-8      	; 0xda <main+0x6e>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <main+0x78>
  e4:	00 00       	nop
  e6:	d2 cf       	rjmp	.-92     	; 0x8c <main+0x20>

000000e8 <_exit>:
  e8:	f8 94       	cli

000000ea <__stop_program>:
  ea:	ff cf       	rjmp	.-2      	; 0xea <__stop_program>
